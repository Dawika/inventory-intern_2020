(function() {
  'use strict';
    angular.module('somsri.somsri.employee_inventory_details', [])
    .controller('inventoryDetailsCtrl', ['$compile', '$scope', '$window', '$filter', '$rootScope', '$timeout', 'translateFilter', '$uibModal', 'Upload', '$state' ,'inventoryRequestService','employeesService','inventoryService', 'inventoryRepairService', 
    function($compile, $scope, $window, $filter, $rootScope, $timeout, translateFilter, $uibModal, Upload, $state, inventoryRequestService, employeesService, inventoryService, inventoryRepairService) {
  	$rootScope.menu = translateFilter("inventory_details")
    var ctrl = this
    var angularScopeRoot = 'angular.element(document.getElementById("angularCtrl")).scope().$root'
    var angularScopeInventory = 'angular.element(document.getElementById("angularCtrl")).scope().inventoryDetailsCtrl'
    var angularCtrlStr = "angular.element(document.getElementById('angularCtrl')).scope().inventoryDetails"
    $rootScope.loadAndAuthorizeResource("employee", function(){
      ctrl.employee_id = $state.params.id;
      ctrl.inventory_request_id = $state.params.inventory_id
      ctrl.delete_button = false
      
      getInventoruDetails()
      getEmployeeById(ctrl.employee_id)

      function getEmployeeById(id) {
        if (id && id != 0) {
          employeesService.getEmployee(id).then(function(resp) {
            ctrl.employee_name  = resp.data.employee_display_name
          })
        }
      }

      function getInventoruDetails() {
        inventoryRequestService.show(ctrl.inventory_request_id).then(function(resp) {
          var value = resp.data
          ctrl.user_name = value.user_name
          ctrl.name = value.item_name
          ctrl.description = value.description
          ctrl.inventory_status = value.inventory_status

          ctrl.price = value.price
          if (!ctrl.price) {
            ctrl.price = "-"
          }
          
          ctrl.return_date = value.return_date
          if (!ctrl.return_date) {
            ctrl.return_date = undefined
          }

          ctrl.receipt = value.manage_inventory.step3.buy_slip
          if (!ctrl.receipt) {
            ctrl.receipt = "-"
          }

          if (ctrl.inventory_status == "wait" || ctrl.inventory_status == "rejected" || ctrl.inventory_status == "delete_inventory") {
            ctrl.delete_button = true
          } else {
            ctrl.delete_button = false
          }

          if (ctrl.inventory_status == "assigned") {
            ctrl.repair_buuton = true
          } else {
            ctrl.repair_buuton = false
          }

          ctrl.inventory_id = value.inventory_id
          if (value.request_date) {
            ctrl.request_date = new Date(value.request_date)
          } else {
            ctrl.request_date = undefined
          }

          ctrl.serial_number = "-"
          ctrl.model = "-"

          

          if (value.inventory) {
            if (value.inventory.serial_number) {
              ctrl.serial_number = value.inventory.serial_number
            }

            if (value.inventory.model) {
              ctrl.model = value.inventory.model
            }

            if (value.inventory.description) {
              ctrl.description = value.inventory.description
            } 
          }
        })
      }

      ctrl.save = function(str) {
        
        if (ctrl.request_date) {
          ctrl.request_date = formatterDate(ctrl.request_date)
        }

        if (!ctrl.description) {
          ctrl.description = "-"
        }

        if (!ctrl.serial_number) {
          ctrl.serial_number = "-"
        }

        if (!ctrl.model) {
          ctrl.model = "-"
        }
        var inventory_request_datas = {
          item_name: ctrl.name,
          description: ctrl.description,
          request_date: ctrl.request_date,
        }
        

       var inventory_datas = {
          item_name: ctrl.name,
          serial_number: ctrl.serial_number,
          model: ctrl.model,
          description: ctrl.description
        }

        updateInventoryRequest(inventory_request_datas, inventory_datas)
      }    

      function updateInventoryRequest(inventory_request_datas, inventory_datas) {
        inventoryRequestService.updateInventoryRequest(inventory_request_datas, ctrl.inventory_request_id).then(function(resp) {
          inventoryService.updateInventory(inventory_datas, ctrl.inventory_id).then(function(resp) {
            backToRootView()
          })
        }, function(e){

        })
      }

      ctrl.repairInventory = function() {
        $rootScope.item_name_repair = ctrl.name
        $rootScope.serial_number_repair = ctrl.serial_number
        $rootScope.reason_repair = ctrl.repair_reason
        $rootScope.openRepairModal(translateFilter("-"), function(resp) {
          ctrl.repair_name = $rootScope.repair_item_name
          ctrl.repair_serial_number = $rootScope.repair_serial_number
          ctrl.repair_reason = $rootScope.repair_reason
          setNull()
          var repair_date = Date()
          var repair_data = {
            inventory_repairs : {
              employee_id: ctrl.employee_id,
              inventory_id: ctrl.inventory_id,
              inventory_request_id: ctrl.inventory_request_id,
              employee_name: ctrl.employee_name,
              item_name: ctrl.repair_name,
              serial_number: ctrl.repair_serial_number,
              reason: ctrl.repair_reason,
              repair_date: repair_date,
              return_date: ctrl.return_date,
              price: ctrl.price,
              receipt: ctrl.receipt
            }
          }
    
          inventoryRequestService.repair(ctrl.inventory_request_id).then(function(resp) {
            inventoryRepairService.newInventoryRepair(repair_data).then(function(resp) {
              inventoryRepairService.repair_notification(resp.data.id).then(function(resp) {
                backToRootView()
              })
            })
          })
        })
      }

      ctrl.deleteInventory = function() {
        $rootScope.openDeleteModal(translateFilter("delete_expense"), function(resp) {
          inventoryRequestService.removeInventoryRequest(ctrl.inventory_request_id).then(function(resp) {
            backToRootView()
          })
        })
      }

      function formatterDate(value) {
        var date = new Date(value.getTime() - (60000 * value.getTimezoneOffset()));
        return date;
      };

      ctrl.cancel = function() {
        backToRootView()
      }

      function backToRootView() {
        setNull()
        $rootScope.activeTab = "inventory"
        $rootScope.openEmployeeDetails(ctrl.employee_id)
      }

      function setNull() {
        $rootScope.repair_item_name = null
        $rootScope.repair_serial_number = null
        $rootScope.repair_reason = null
      }

      ctrl.openRequestDatePopup = function() {
        ctrl.requestDatePopup.opened = true;
      }

      ctrl.requestDatePopup = {
        opened: false
      }      
    })
	}]);
})();