(function() {
  'use strict';
    angular.module('somsri.somsri.inventory_supplier_details', [])
    .controller('supplierDetailsCtrl', ['$compile', '$scope', '$window', '$filter', '$rootScope', '$timeout', 'translateFilter', '$uibModal', 'Upload', '$state' ,'inventorySupplierService', function($compile, $scope, $window, $filter, $rootScope, $timeout, translateFilter, $uibModal, Upload, $state, service) {
    $rootScope.menu = translateFilter("supplier_details")
    var ctrl = this
    var angularScopeRoot = 'angular.element(document.getElementById("angularCtrl")).scope().$root'
    var angularScopeInventoryNew = 'angular.element(document.getElementById("angularCtrl")).scope().supplierDetailsCtrl'
    var angularCtrlStr = 'angular.element(document.getElementById("angularCtrl")).scope().supplierDetails'

    $rootScope.loadAndAuthorizeResource("supplier_details", function(){
	    ctrl.real_id = $state.params.id;
	    var inventory_supplier_details_table = $('#supplier-details-table');

	    function filterDate(value, row, index) {
	      if (value) {
	        return $filter('date')(Date.parse(value), 'dd/MM/yyyy');
	      }
	      return "-";
	    }

	    function formatePrice(value, row, index) {
	      if (value) {
	          return $filter('number')(value.toFixed(2), 2);
	      }
	      return "-"
	    }

	    var bootstrapTableOptionsInventorySupplierDetails = {
	      sortName: 'updated_at',
	      sortOrder: 'desc',
	      columns : [{
	        field: 'number',
	        title: '#',
	        classes: 'text-right',
	        sortable: true,
	      },{
	        field: 'item_name',
	        title: translateFilter("item_name"),
	        align: 'left',
	        sortable: true,
	      },{
	        field: 'serial_number',
	        title: translateFilter("serial_number"),
	        align: 'left',
	        sortable: true,
	      },{
	        field: 'model',
	        title: translateFilter("model"),
	        align: 'left',
	        sortable: true,
	      },{
	        field: 'description',
	        title: translateFilter("description"),
	        align: 'left',
	        sortable: true,
	      },{
	        field: 'price',
	        title: translateFilter("price"),
	        align: 'right',
	        sortable: true,
	        class: 'text-currency',
	        formatter: formatePrice
	      },{
	        field: 'date_purchase',
	        title: translateFilter("date_purchase"),
	        align: 'right',
	        sortable: true,
	        formatter: filterDate
	      }]
	    }

	  	inventory_supplier_details_table.bootstrapTable($.extend(bootstrapTableOptionsInventorySupplierDetails, {toolbar: "date-filter"}));
	  	
	  	function getSupplierDetails() {
	      if (!ctrl.real_id) { 
	        return
	      }

	      ctrl.add_button = "save"
	      if(!ctrl.suppliersCurrentPage){ ctrl.suppliersCurrentPage = 1 }
	      service.show(ctrl.real_id, ctrl.suppliersCurrentPage).then(function(resp) {
	        var value = resp.data.suppliers
	        var inventories = resp.data.inventories
	        ctrl.datas = resp.data.suppliers
	        ctrl.name = value.name
	        ctrl.address = value.address
	        ctrl.phone_number = value.phone_number
	        ctrl.email = value.email
	        if (value) {
	          ctrl.suppliersTotalItems = resp.data.total_records;
	          ctrl.suppliersCurrentPage = resp.data.current_page;
	          ctrl.datasInventoryExport = inventories
	          var datas = []
	          var count = ctrl.datasInventoryExport.length
	          for(var i = 0; i<count; i++) {
	            datas.push({
	              number: ((ctrl.suppliersCurrentPage - 1) * 10) + i + 1,
	              id: ctrl.datasInventoryExport[i].id,
	              item_name: ctrl.datasInventoryExport[i].item_name,
	              serial_number: ctrl.datasInventoryExport[i].serial_number,
	              model: ctrl.datasInventoryExport[i].model,
	              description: ctrl.datasInventoryExport[i].description,
	              price: ctrl.datasInventoryExport[i].price,
	              date_purchase: ctrl.datasInventoryExport[i].date_purchase,
	              created_at: ctrl.datasInventoryExport[i].created_at,
	              updated_at: ctrl.datasInventoryExport[i].updated_at
	            })
	          }
	          ctrl.datasInventoryExport = datas
	        } else {
	          ctrl.suppliersTotalItems = 0;
	          ctrl.suppliersCurrentPage = 0;
	        }
	        ctrl.paginateButtonMaxSize = 5;
	        inventory_supplier_details_table.bootstrapTable('load', ctrl.datasInventoryExport);
		    })
		  }

		  ctrl.cancel = function() {
           $rootScope.openInventory(2);
        }

		  ctrl.pageSuppliersChanged = function() {
		  	getSupplierDetails()
		  }

			getSupplierDetails()

			ctrl.save = function() {
	      if (!ctrl.name) {
	        ctrl.name = "-"
	      }

	      if (!ctrl.address) {
	        ctrl.address = "-"
	      }

	      if (!ctrl.phone_number) {
	        ctrl.phone_number = "-"
	      }

	      if (!ctrl.email) {
	        ctrl.email = "-"
	      }

      var datas = {
        suppiler: {
          name: ctrl.name,
          address: ctrl.address,
          phone_number: ctrl.phone_number,
          email: ctrl.email
        }
      }

      if (ctrl.real_id) {
      	updateSuppliers(datas, ctrl.real_id)
      }
    }

    function updateSuppliers(data, id) {
      service.updateSuppliers(data,id).then(function(resp) {
        $rootScope.openInventory(2)
      })
    }
    
		});
  }]);
})();
