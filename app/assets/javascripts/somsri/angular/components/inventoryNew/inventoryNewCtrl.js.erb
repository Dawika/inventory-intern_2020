(function() {
  'use strict';
  angular.module('somsri.somsri.inventory_new', [])
    .controller('inventoryNewCtrl', ['$compile', '$scope', '$window', '$filter', '$rootScope', '$timeout', 'translateFilter', '$uibModal', 'Upload', "inventoryService", 'employeesService', '$state', function($compile, $scope, $window, $filter, $rootScope, $timeout, translateFilter, $uibModal, Upload, service, employeesService, $state) {
      $rootScope.menu = translateFilter("inventory")
        var ctrl = this
        var angularScopeRoot = 'angular.element(document.getElementById("angularCtrl")).scope().$root'
        var angularScopeInventoryNew = 'angular.element(document.getElementById("angularCtrl")).scope().inventoryNewCtrl'
        var angularCtrlStr = 'angular.element(document.getElementById("angularCtrl")).scope().inventoryNew'
        ctrl.inventoryNew = [];
        ctrl.real_id = $state.params.id;
        ctrl.message = '';
        ctrl.name = ""
        ctrl.serial_number = ""
        ctrl.model = ""
        ctrl.description = ""
        ctrl.price = ""
        ctrl.category = translateFilter("select_category")
        ctrl.displayName = translateFilter("select_employee")
        ctrl.add_button = "add"
        ctrl.filterKeyword = ''
        // default last 7 days
        ctrl.end_date = new Date();
        ctrl.start_date = new Date(new Date().setMonth(new Date().getMonth() - 1));
        ctrl.item_catogery = [
          {name: "office_furniture", id: 1},
          {name: "equipment_computer", id: 2},
          {name: "office_supplies", id: 3},
          {name: "maintenance_equipment", id: 4},
          {name: "cleaning_products", id: 5},
          {name: "electronic_office_equipment", id: 6},
          {name: "paper_products", id: 7},
          {name: "meeting_presentation_equipment", id: 8}
        ]
        ctrl.category_barcode_list = []
 
        function initData() {
          if (!ctrl.real_id) { 
            return
          }

          ctrl.add_button = "edit"

          service.show(ctrl.real_id).then(function(resp) {
            var value = resp.data
            ctrl.datas = resp.data
            
            ctrl.name = value.item_name
            if (!ctrl.name) {
              ctrl.name = "-"
            }
            
            ctrl.serial_number = value.serial_number
            if (!ctrl.serial_number) {
              ctrl.serial_number = "-"
            }

            ctrl.model = value.model
            if (!ctrl.model) {
              ctrl.model = "-"
            }
            
            ctrl.description = value.description
            if (!ctrl.description) {
              ctrl.description = "-"
            }
            
            ctrl.price = value.price
            if (!ctrl.price) {
              ctrl.price = "0"
            }

            if (value.date_purchase) {
              ctrl.datas.date_purchase = new Date(ctrl.datas.date_purchase)
            } else {
              ctrl.datas.date_purchase = null
            }

            if (value.end_warranty) {
              ctrl.datas.end_warranty = new Date(ctrl.datas.end_warranty)
            } else {
              ctrl.datas.end_warranty = null
            }
            ctrl.get_category_id = value.categories.id
            ctrl.category_id = value.categories.category_id
            ctrl.category = value.categories.category_name
            if (!ctrl.category) {
              ctrl.category = translateFilter("select_category")
            }
            
            ctrl.category_barcode = value.categories.category_barcode
            ctrl.date_add = value.date_add
            ctrl.employee_id = value.employee_id
            if (ctrl.employee_id) {
              getEmployeeById(ctrl.employee_id)
            } else {
              ctrl.employee_name = "-"
            }
          })
        }

        function cleanDate(date){
          if(!date || new Date(date) == "Invalid Date"){return;}
          var nowDate = new Date()
          date.setHours(nowDate.getHours())
          date.setMinutes(nowDate.getMinutes())        
          date.setSeconds(nowDate.getSeconds())
          return date
        }

        ctrl.save = function() {
          var changePrice = parseFloat(ctrl.price);
          changePrice = changePrice
          var changeDatePurchase = $filter('date')(new Date(ctrl.datas.date_purchase), 'yyyy-MM-ddTh:MM:ss')
          var changeDateEndWarranty = ""
          if (ctrl.datas.end_warranty) {
            changeDateEndWarranty = $filter('date')(new Date(ctrl.datas.end_warranty), 'yyyy-MM-ddTh:MM:ss')
          }
          
          if (!ctrl.real_id) {
            ctrl.date_add = $filter('date')(new Date(Date()), 'dd/MM/yyyy')
          }

          if (ctrl.category == translateFilter("select_category")) {
            ctrl.category = null
          }

          generateCategoryBarcode(ctrl.category)

          if (ctrl.checkName) {
            var data = {
              first_name: ctrl.employee_name
            }
            if (ctrl.employee_name) {
              employeesService.createEmployee(data).then(function(resp) {
                ctrl.employee_id = resp.data.employee.id
                beforeCreate(changePrice,changeDatePurchase,changeDateEndWarranty)
              })
            } else {
              ctrl.employee_id = 0
              beforeCreate(changePrice,changeDatePurchase,changeDateEndWarranty)
            }
          } else {
            if (ctrl.employee_name) {
              beforeCreate(changePrice,changeDatePurchase,changeDateEndWarranty)
            } else {
              ctrl.employee_id = 0
              beforeCreate(changePrice,changeDatePurchase,changeDateEndWarranty)
            }
            
          }

        };

        function beforeCreate(changePrice,changeDatePurchase,changeDateEndWarranty) {

          if (!ctrl.serial_number) {
            ctrl.serial_number = "-"
          }

          if (!ctrl.model) {
            ctrl.model = "-"
          }

          var inventory_datas = {
            item_name: ctrl.name,
            serial_number: ctrl.serial_number,
            model: ctrl.model,
            description: ctrl.description,
            price: changePrice,
            date_purchase: changeDatePurchase,
            date_add: ctrl.date_add,
            end_warranty: changeDateEndWarranty,
            employee_id: ctrl.employee_id
          }

          var category_datas = {
            categories: {
              category_id: ctrl.category_id,
              category_name: ctrl.category,
              category_barcode: ctrl.category_barcode
            }
          }
            
          if (!ctrl.real_id) {
            createInventory(inventory_datas, category_datas)
          } else {
            updateInventory(inventory_datas, ctrl.real_id, category_datas)
          }
        }

        function createInventory(inventory_datas, category_datas) {
           service.newInventory(inventory_datas).then(function(resp) {
              createCategory(resp.data.id, category_datas)
          }, function(e){
            // Error
          });
        }

        function createCategory(inventory_id, data) {
          service.createCategory(inventory_id, data).then(function(resp) {
             $rootScope.openInventory();
          })
        }

        function updateInventory(inventory_datas, id, category_datas) {
          service.updateInventory(inventory_datas, id).then(function(resp) {
            updateCategory(category_datas)
          },function(e) {
            // Error
          })
        }

        function updateCategory(data) {
          service.updateCategory(ctrl.real_id, ctrl.get_category_id, data).then(function(resp) {
             $rootScope.openInventory();
          })
        }

        ctrl.cancel = function() {
           $rootScope.openInventory();
        }

        function initDatas(){
          if(!ctrl.datas) { ctrl.datas = {} }
        }
  
        function autoFillEmployee($item){
          if($item.id){
            for(var i = 0;i < ctrl.employee_lists.length; i++){
              if($item.id == ctrl.employee_lists[i].id){
                initDatas();
                ctrl.checkName = false
              }
            }
          }
        }

        function autoCheckName(data) {
          if(data[0].id){
            for(var i = 0;i < ctrl.employee_lists.length; i++){
              if(data[0].id == ctrl.employee_lists[i].id){
                ctrl.checkName = false
              } else {
                ctrl.checkName = true
              }
            }
          }
        }

        ctrl.onChangeName = function() {
          var data = []
          data.push({
            name: ctrl.employee_name,
            id: -1
          })
          autoCheckName(data);
        }

        ctrl.switchCategory = function() {
          for( var i = 0; i < ctrl.item_catogery.length; i++ ) {
            if (ctrl.item_catogery[i].name == ctrl.category) {
              ctrl.category = ctrl.item_catogery[i].name
              ctrl.category_id = ctrl.item_catogery[i].id
            }
          }
        }

        ctrl.onSelectEmployeeFullName = function($item) {
          ctrl.employee_name = $item.name;
          ctrl.employee_id = $item.id
          autoFillEmployee($item);
        };

        function getEmployee(){
          ctrl.employee_lists = []
          employeesService.getAllEmployee().then(function(resp) {
            if (resp.data.length > 0) {
              for (var i = 0; i < resp.data.length; i++) {
                var employees = resp.data[i]
                if (employees.name !== ctrl.displayName) {
                  ctrl.employee_lists.push({
                    name: employees.name,
                    id: employees.id
                  })
                }
              }
            }
          });
        };

        function getEmployeeById(id) {
          employeesService.getEmployee(id).then(function(resp) {
              ctrl.employee_name = resp.data.employee_display_name
          })
        }

        ctrl.openDatePurchasePopup = function() {
          ctrl.datePurchasePopup.opened = true;
        };

        ctrl.datePurchasePopup = {
          opened: false
        };

        ctrl.openEndWarrantyPopup = function() {
          ctrl.endWarrantyPopup.opened = true;
        };

        ctrl.endWarrantyPopup = {
          opened: false
        };

        function generateCategoryBarcode(str) {
          ctrl.barcode = ""
          var random = randomNumber()
          switch(str) {
            case 'office_furniture': 
               ctrl.barcode = "fu"
              break
            case 'equipment_computer': 
               ctrl.barcode = "co"
              break
            case 'office_supplies': 
               ctrl.barcode = "or"
              break
            case 'maintenance_equipment': 
               ctrl.barcode = "ma"
              break
            case 'cleaning_products': 
               ctrl.barcode = "cl"
              break
            case 'electronic_office_equipment': 
               ctrl.barcode = "el"
              break
            case 'paper_products': 
               ctrl.barcode = "pa"
            break
            case 'meeting_presentation_equipment': 
               ctrl.barcode = "pr"
              break
            default :
              break  
          }

          ctrl.barcode = ctrl.barcode+random

          var check = false
          for(var i = 0; i < ctrl.category_barcode_list.length; i++) {
            if (ctrl.barcode === ctrl.category_barcode_list[i]) {
              check = true
              break
            }
          }

          if (check) {
            generateCategoryBarcode(str)
          }

          ctrl.category_barcode = ctrl.barcode
        }

        function randomNumber() {
          return Math.floor(100000+Math.random() * 9999)
        }

        function getInventoryList() {
          service.getInventory().then(function(resp) {
            for (var i = 0; i < resp.data.inventories.length; i++) {
              ctrl.category_barcode_list.push(resp.data.inventories[i].category_barcode)
            }
          })
        }
      
        getEmployee()
        getInventoryList()
        initData()

  }]);
})();