(function() {
  'use strict';
  angular.module('somsri.somsri.inventory_new', [])
    .controller('inventoryNewCtrl', ['$compile', '$scope', '$window', '$filter', '$rootScope', '$timeout', 'translateFilter', '$uibModal', 'Upload', "inventoryService", 'employeesService', '$state' , "inventorySupplierService",'inventoryRequestService', 
      function($compile, $scope, $window, $filter, $rootScope, $timeout, translateFilter, $uibModal, Upload, service, employeesService, $state, inventorySupplierService, inventoryRequestService) {
      $rootScope.menu = translateFilter("inventory")
        var ctrl = this
        var angularScopeRoot = 'angular.element(document.getElementById("angularCtrl")).scope().$root'
        var angularScopeInventoryNew = 'angular.element(document.getElementById("angularCtrl")).scope().inventoryNewCtrl'
        var angularCtrlStr = 'angular.element(document.getElementById("angularCtrl")).scope().inventoryNew'
        ctrl.inventoryNew = [];
        ctrl.real_id = $state.params.id;
        ctrl.message = '';
        ctrl.name = ""
        ctrl.serial_number = ""
        ctrl.model = ""
        ctrl.description = ""
        ctrl.price = ""
        ctrl.category = translateFilter("select_category")
        ctrl.material_category = translateFilter("select_category")
        ctrl.displayName = translateFilter("select_employee")
        ctrl.supplierDisplayName = translateFilter("select_supllier")
        ctrl.add_button = "add"
        ctrl.filterKeyword = ''
        ctrl.supplierName = ""
        ctrl.address = ""
        ctrl.phone_number = ""
        ctrl.email = ""
        ctrl.inventory_request_id = ""
        ctrl.showType = false
        ctrl.showinventoryType = true
        ctrl.showinventorymaterialType = true
        ctrl.showemployee = false
        // default last 7 days
        ctrl.end_date = new Date();
        ctrl.start_date = new Date(new Date().setMonth(new Date().getMonth() - 1));
        ctrl.item_catogery = [
          {name: "office_furniture", id: 1},
          {name: "equipment_computer", id: 2},
          {name: "office_supplies", id: 3},
          {name: "maintenance_equipment", id: 4},
          {name: "cleaning_products", id: 5},
          {name: "electronic_office_equipment", id: 6},
          {name: "paper_products", id: 7},
          {name: "meeting_presentation_equipment", id: 8},
          {name: "other", id: 9}
        ]
        ctrl.category_barcode_list = []

        function initData() {
          if (!ctrl.real_id) { 
            return
          }

          ctrl.add_button = "edit"

          service.show(ctrl.real_id).then(function(resp) {
            var value = resp.data
            ctrl.datas = resp.data
            if(value.inventory_type != "material"){
              ctrl.showinventorymaterialType = false
              ctrl.activeTab = 0
              ctrl.name = value.item_name
              if (!ctrl.name) {
                ctrl.name = "-"
              }
              ctrl.serial_number = value.serial_number
              if (!ctrl.serial_number) {
                ctrl.serial_number = "-"
              }
              ctrl.model = value.model
              if (!ctrl.model) {
                ctrl.model = "-"
              }
              ctrl.description = value.description
              if (!ctrl.description) {
                ctrl.description = "-"
              }  
              ctrl.price = value.price
              if (!ctrl.price) {
                ctrl.price = ""
              }
              if (value.date_purchase) {
                ctrl.datas.date_purchase = new Date(ctrl.datas.date_purchase)
              } else {
                ctrl.datas.date_purchase = null
              }
              if (value.end_warranty) {
                ctrl.datas.end_warranty = new Date(ctrl.datas.end_warranty)
              } else {
                ctrl.datas.end_warranty = null
              }
              ctrl.get_category_id = value.categories.id
              ctrl.category_id = value.categories.category_id
              ctrl.category = value.categories.category_name
              if (!ctrl.category) {
                ctrl.category = translateFilter("select_category")
              }
              ctrl.category_barcode = value.categories.category_barcode
              ctrl.date_add = value.date_add
              ctrl.employee_id = value.employee_id
              if (ctrl.employee_id && ctrl.employee_id != 0) {
                getEmployeeById(ctrl.employee_id)
                ctrl.showemployee = true
              } else {
                ctrl.showemployee = false
              }
              ctrl.supplier_id = value.supplier_id
              if (ctrl.supplier_id) {
                getSupplierById(ctrl.supplier_id)
              } else {
                ctrl.supplier_name = "-"
              }

            }else if (value.inventory_type == "material"){
              ctrl.showinventoryType = false
              ctrl.activeTab = 1
              ctrl.material_name = value.item_name
              if (!ctrl.material_name) {
                ctrl.material_name = "-"
              }
              ctrl.material_description = value.description
              if (!ctrl.material_description) {
                ctrl.material_description = "-"
              }
              ctrl.material_price = value.price
              if (!ctrl.material_price) {
                ctrl.material_price = ""
              }
              if (value.date_purchase) {
                ctrl.datas.material_date_purchase = new Date(ctrl.datas.date_purchase)
              } else {
                ctrl.datas.material_date_purchase = null
              }
              ctrl.material_get_category_id = value.categories.id
              ctrl.material_category_id = value.categories.category_id
              ctrl.material_category = value.categories.category_name
              if (!ctrl.material_category) {
                ctrl.material_category = translateFilter("select_category")
              }
              ctrl.material_category_barcode = value.categories.category_barcode
              ctrl.material_date_add = value.date_add
              ctrl.material_employee_id = value.employee_id
              if (ctrl.material_employee_id && ctrl.material_employee_id != 0) {
                getEmployeeById(ctrl.material_employee_id)
              } else {
                ctrl.material_employee_name = "-"
              }
              ctrl.material_supplier_id = value.supplier_id
              if (ctrl.material_supplier_id) {
                getSupplierById(ctrl.material_supplier_id)
              } else {
                ctrl.material_supplier_name = "-"
              }
            }

            if (value.inventory_requests) {
              var inventory_request = value.inventory_requests
              for (var i = 0; i < inventory_request.length; i++) {
                if(inventory_request[i].inventory_status == "assigned" || inventory_request[i].inventory_status == "return") {
                  ctrl.request_type = inventory_request[i].request_type
                  if (ctrl.request_type == "request") {
                    ctrl.showType = true
                    ctrl.change_request_type = translateFilter("withdraw_equipment")
                  } else {
                    ctrl.showType = false
                    ctrl.change_request_type = translateFilter("new_request_inventory")
                  }
                  if (inventory_request[i].return_date) {
                    ctrl.return_date = new Date(inventory_request[i].return_date)
                  }
                  
                  if (inventory_request[i].define_return_date) {
                    ctrl.define_return_date = new Date(inventory_request[i].define_return_date)
                  }
                  ctrl.inventory_request_id = inventory_request[i].id
                  break
                }
              }
            }
          })
        }

        function cleanDate(date){
          if(!date || new Date(date) == "Invalid Date"){return;}
          var nowDate = new Date()
          date.setHours(nowDate.getHours())
          date.setMinutes(nowDate.getMinutes())        
          date.setSeconds(nowDate.getSeconds())
          return date
        }

        function formatterDate(value) {
          var date = new Date(value.getTime() - (60000 * value.getTimezoneOffset()));
          return date;
        };

        ctrl.material = function() {
          $rootScope.openminimalConfirmSaveModal(translateFilter("save_change_confirmation"),function(){
            var changePrice = parseFloat(ctrl.material_price);
          ctrl.model = undefined
          ctrl.datas.end_warranty = undefined
          ctrl.serial_number = undefined

          if (!ctrl.real_id) {
            ctrl.date_add = Date()
          }

          if (ctrl.material_category == translateFilter("select_category")) {
            ctrl.material_category = null
          }

          generateCategoryBarcode(ctrl.material_category)

          if (ctrl.checkName) {
            ctrl.employee_id = ""
            if (ctrl.checkSupplier) {

            }
            beforeCreate(changePrice, "material")

          } else {
            if (ctrl.material_employee_name) {
              beforeCreate(changePrice, "material")
            } else {
              ctrl.material_employee_id = ""
              beforeCreate(changePrice, "material")
            } 
          }
          })
        }
        
        ctrl.save = function() {
          $rootScope.openminimalConfirmSaveModal(translateFilter("save_change_confirmation"),function(){
            var changePrice = parseFloat(ctrl.price);
          
            if (!ctrl.real_id) {
              ctrl.date_add = Date()
            }

            if (ctrl.category == translateFilter("select_category")) {
              ctrl.category = null
            }
            if (!ctrl.serial_number) {
              ctrl.serial_number = "-"
            }

            if (!ctrl.model) {
              ctrl.model = "-"
            }

            generateCategoryBarcode(ctrl.category)

            if (ctrl.checkName) {
              ctrl.employee_id = ""
              if (ctrl.checkSupplier) {

              }
              beforeCreate(changePrice, "durable_goods")
              // var data = {
              //   first_name: ctrl.employee_name,
              //   email: "",
              //   password: ""
              // }
              // if (ctrl.employee_name) {
              //   employeesService.createEmployee(data).then(function(resp) {
              //     ctrl.employee_id = resp.data.employee.id
              //     beforeCreate(changePrice)
              //   })
              // } else {
              //   ctrl.employee_id = 0
              //   beforeCreate(changePrice)
              // }
            } else {
              if (ctrl.employee_name) {
                beforeCreate(changePrice, "durable_goods")
              } else {
                ctrl.employee_id = ""
                beforeCreate(changePrice, "durable_goods")
              } 
            }
          })
        };

        function beforeCreate(changePrice,str) {
            if (ctrl.material_name) {
              ctrl.name = ctrl.material_name
            }
  
            if (ctrl.material_description) {
              ctrl.description = ctrl.material_description
            }
  
            if (ctrl.material_price) {
              ctrl.price = ctrl.material_price
            }
  
            if (str == "durable_goods") {
              ctrl.category = ctrl.category
            }else{
              ctrl.category = ctrl.material_category
            }
  
            if(ctrl.datas.material_date_purchase) {
              ctrl.datas.date_purchase = ctrl.datas.material_date_purchase
            }
  
            if(ctrl.material_employee_name) {
              ctrl.employee_name = ctrl.material_employee_name
            }
  
            // if(ctrl.material_supplier_name) {
            //   ctrl.supplier_name = ctrl.material_supplier_name
            // }
  
            if (!ctrl.description) {
              ctrl.description = "-"
            }
  
            if (ctrl.employee_id == 0) {
              ctrl.employee_name = ""
            }
  
            var employee_id = ctrl.employee_id
            if (ctrl.return_date) {
              employee_id = ""
            }
  
            var changeDatePurchase = formatterDate(ctrl.datas.date_purchase)
  
            var inventory_datas = {
              item_name: ctrl.name,
              serial_number: ctrl.serial_number,
              model: ctrl.model,
              description: ctrl.description,
              price: changePrice,
              date_purchase: changeDatePurchase,
              date_add: ctrl.date_add,
              end_warranty: ctrl.datas.end_warranty,
              employee_id: employee_id,
              supplier_id: ctrl.supplier_id,
              inventory_type: str
            }
            var category_datas = {
              categories: {
                category_id: ctrl.category_id,
                category_name: ctrl.category,
                category_barcode: ctrl.category_barcode
              }
            }
            if (!ctrl.real_id) {
              createInventory(inventory_datas, category_datas)
            } else {
              updateInventory(inventory_datas, ctrl.real_id, category_datas)
            }
        }

        function createInventory(inventory_datas, category_datas) {
           service.newInventory(inventory_datas).then(function(resp) {
              createCategory(resp.data.id, category_datas)
          }, function(e){
            // Error
          });
        }

        function createCategory(inventory_id, data) {
          service.createCategory(inventory_id, data).then(function(resp) {
            beforeCreateInventoryRequest(inventory_id)
          })
        }

        function updateInventory(inventory_datas, id, category_datas) {
          service.updateInventory(inventory_datas, id).then(function(resp) {
            updateCategory(category_datas)
          },function(e) {
            // Error
          })
        }

        function updateCategory(data) {
          service.updateCategory(ctrl.real_id, ctrl.get_category_id, data).then(function(resp) {
            beforeCreateInventoryRequest(ctrl.real_id)
             // $rootScope.openInventory();
          })
        }

        ctrl.cancel = function() {
           $rootScope.openInventory();
        }

        function initDatas(){
          if(!ctrl.datas) { ctrl.datas = {} }
        }
  
        function autoFillEmployee($item){
          if($item.id){
            for(var i = 0;i < ctrl.employee_lists.length; i++){
              if($item.id == ctrl.employee_lists[i].id){
                initDatas();
                ctrl.checkName = false
              }
            }
          }
        }

        function autoCheckName(data) {
          if(data[0].id){
            for(var i = 0;i < ctrl.employee_lists.length; i++){
              if(data[0].id == ctrl.employee_lists[i].id){
                ctrl.checkName = false
                break
              } else {
                ctrl.checkName = true
              }
            }
          }
        }

        ctrl.onChangeName = function() {
          var data = []
          data.push({
            name: ctrl.employee_name,
            id: ""
          })
          autoCheckName(data);
        }

        ctrl.switchCategory = function() {
          for( var i = 0; i < ctrl.item_catogery.length; i++ ) {
            if (ctrl.item_catogery[i].name == ctrl.category) {
              ctrl.category = ctrl.item_catogery[i].name
              ctrl.category_id = ctrl.item_catogery[i].id
            }
          }
        }

        ctrl.onSelectEmployeeFullName = function($item) {
          ctrl.employee_name = $item.name;
          ctrl.employee_id = $item.id
          autoFillEmployee($item);
        };

        function getEmployee(){
          ctrl.employee_lists = []
          employeesService.getAllEmployee().then(function(resp) {
            if (resp.data.length > 0) {
              for (var i = 0; i < resp.data.length; i++) {
                var employees = resp.data[i]
                if (employees.name !== ctrl.displayName) {
                  ctrl.employee_lists.push({
                    name: employees.name,
                    id: employees.id
                  })
                }
              }
            }
          });
        };

        function getEmployeeById(id) {
          if (ctrl.employee_id && ctrl.employee_id != 0 || ctrl.material_employee_id && ctrl.material_employee_id != 0) {
              employeesService.getEmployee(id).then(function(resp) {
                if(ctrl.employee_id && ctrl.employee_id != 0){
                  ctrl.employee_name = resp.data.employee_display_name
                }else{
                  ctrl.material_employee_name = resp.data.employee_display_name
                  console.log(ctrl.material_employee_name);
                }
            })
          }
        }

        ctrl.openDatePurchasePopup = function() {
          ctrl.datePurchasePopup.opened = true;
        };

        ctrl.datePurchasePopup = {
          opened: false
        };

        ctrl.openEndWarrantyPopup = function() {
          ctrl.endWarrantyPopup.opened = true;
        };

        ctrl.endWarrantyPopup = {
          opened: false
        };

        function generateCategoryBarcode(str) {
          ctrl.barcode = ""
          var random = randomNumber()
          switch(str) {
            case 'office_furniture': 
              ctrl.barcode = "fu"
              break
            case 'equipment_computer': 
              ctrl.barcode = "co"
              break
            case 'office_supplies': 
              ctrl.barcode = "or"
              break
            case 'maintenance_equipment': 
              ctrl.barcode = "ma"
              break
            case 'cleaning_products': 
              ctrl.barcode = "cl"
              break
            case 'electronic_office_equipment': 
              ctrl.barcode = "el"
              break
            case 'paper_products': 
              ctrl.barcode = "pa"
              break
            case 'meeting_presentation_equipment': 
              ctrl.barcode = "pr"
              break
            case 'other':
              ctrl.barcode = "oh"
              break
            default :
              ctrl.barcode = "oh"
              break  
          }

          ctrl.barcode = ctrl.barcode+random

          var check = false
          for(var i = 0; i < ctrl.category_barcode_list.length; i++) {
            if (ctrl.barcode === ctrl.category_barcode_list[i]) {
              check = true
              break
            }
          }

          if (check) {
            generateCategoryBarcode(str)
          }

          ctrl.category_barcode = ctrl.barcode
        }

        function randomNumber() {
          return Math.floor(100000+Math.random() * 9999)
        }

        function getInventoryList() {
          service.getInventory().then(function(resp) {
            for (var i = 0; i < resp.data.inventories.length; i++) {
              ctrl.category_barcode_list.push(resp.data.inventories[i].category_barcode)
            }
          })
        }

        function getSupplierById(id) {
          inventorySupplierService.show(id).then(function(resp) {
            if(ctrl.supplier_id){
              ctrl.supplier_name = resp.data.suppliers.name
            }else if(ctrl.material_supplier_id){
              ctrl.material_supplier_name = resp.data.suppliers.name
            }
          })
        }

        function getSupplierList() {
          ctrl.supplier_lists = []
          inventorySupplierService.getAllSuppliers().then(function(resp) {
            if (resp.data.length > 0){
              for (var i = 0; i < resp.data.length; i++) {
                var supplier = resp.data[i]
                if (supplier.name != ctrl.supplierDisplayName) {
                  ctrl.supplier_lists.push({
                    name: supplier.name,
                    id: supplier.id
                  })
                }
              }
            }
          })
        }

        ctrl.onSelectSupplier = function($item) {
          ctrl.supplier_name = $item.name;
          ctrl.supplier_id = $item.id
        };
        ctrl.onSelectSupplierMaterial = function($item) {
          ctrl.material_supplier_name = $item.name;
          ctrl.supplier_id = $item.id
        };

        ctrl.onChangeSupplierMaterial = function() {
          ctrl.material_supplier_name = ctrl.material_supplier_name
          ctrl.supplier_id = undefined
        }

        ctrl.onChangeSupplier = function() {
          ctrl.supplier_name = ctrl.supplier_name
          ctrl.supplier_id = undefined
        }

        ctrl.openAddSupplierModal = function() {
          $rootScope.appSupplierModal(translateFilter('add_supplier'), function(){
            ctrl.supplier_id = $rootScope.supplier_id
            ctrl.supplier_name = $rootScope.supplier_name
            $rootScope.supplier_id = null
            $rootScope.supplier_name = null
          })
        }

        function beforeCreateInventoryRequest(inventory_id) {
          var changePrice = parseFloat(ctrl.price);
          
          var inventory_datas = {
            inventories_request : {
              user_name: ctrl.employee_name,
              item_name: ctrl.name,
              description: ctrl.description,
              price: changePrice,
              request_date: ctrl.date_add,
              comment: "",
              employee_id: ctrl.employee_id,
              inventory_id: inventory_id,
              return_date: undefined,
              request_count: undefined,
              request_type: "new",
              define_return_date: undefined
            }
          }

          var comment = ""
          if (ctrl.return_date) {
            comment = translateFilter("return_inventory")
          }

          var update_datas = {
            user_name: ctrl.employee_name,
            item_name: ctrl.name,
            description: ctrl.description,
            price: changePrice,
            request_date: ctrl.date_add,
            comment: comment,
            employee_id: ctrl.employee_id,
            inventory_id: inventory_id,
            return_date: ctrl.return_date,
            request_count: ctrl.request_count,
            request_type: ctrl.request_type,
            define_return_date: ctrl.define_return_date
          }

          if (!ctrl.inventory_request_id) {
            if (ctrl.employee_id) {
              createInventoryRequest(inventory_datas)
            } else {
              $rootScope.openInventory()
            }
          } else {
            updateInventoryRequest(update_datas, ctrl.inventory_request_id)
          }
        }

        function createInventoryRequest(inventory_datas) {
          inventoryRequestService.newInventoryRequest(inventory_datas).then(function(resp) {
            inventoryRequestService.assigned(resp.data.id).then(function(resp) {
              $rootScope.openInventory()
            })
          }, function(e) {

          })
        }

        function updateInventoryRequest(update_datas, inventory_request_id) {
          inventoryRequestService.updateInventoryRequest(update_datas, inventory_request_id).then(function(resp) {
            if (ctrl.return_date) {
              deleteInventoryRequest(ctrl.inventory_request_id)
            } else {
              $rootScope.openInventory()
            }
          })
        }

        function deleteInventoryRequest(inventory_request_id) {
          inventoryRequestService.delete(inventory_request_id).then(function(resp) {
            $rootScope.openInventory()
          }, function(e) {

          })
        }


        ctrl.openDefineReturnDatePopup = function() {
          ctrl.defineReturnDatePopup.opened = true;
        };

        ctrl.defineReturnDatePopup = {
          opened: false
        };

        ctrl.openReturnDatePopup = function() {
          ctrl.returnDatePopup.opened = true;
        };

        ctrl.returnDatePopup = {
          opened: false
        };

        getEmployee()
        getSupplierList()
        getInventoryList()
        initData()

  }]);
})();