(function() {
  'use strict';
  angular.module('somsri.somsri.update_inventory_request', [])
    .controller('updateInventoryRequestCtrl', ['$compile', '$scope', '$window', '$filter', '$rootScope', '$timeout', 'translateFilter', '$uibModal', 'Upload', '$state', "inventoryRequestService","settingService" , 
      function($compile, $scope, $window, $filter, $rootScope, $timeout, translateFilter, $uibModal, Upload, $state, service, settingService) {
	$rootScope.menu = translateFilter("inventory_request")
		var ctrl = this
		ctrl.real_id = $state.params.id;

  	function initData() {
      if (!ctrl.real_id) { 
        return
      }

      service.show(ctrl.real_id).then(function(resp) {
        var value = resp.data
        ctrl.datas = resp.data
        ctrl.name = value.item_name
        ctrl.description = value.description
        ctrl.price = value.price
        ctrl.user_name = value.user_name
        ctrl.request_date = new Date(value.request_date)
        ctrl.employee_id = value.employee_id
        ctrl.request_type = value.request_type
        if (ctrl.request_type == "request") {
          ctrl.change_request_type = translateFilter("withdraw_equipment")
        } else {
          ctrl.change_request_type = translateFilter("new_request_inventory")
        }
        ctrl.inventory_status = value.inventory_status

        if (value.request_date) {
          ctrl.datas.request_date = new Date(ctrl.datas.request_date)
        } else {
          ctrl.datas.request_date = null
        }

        ctrl.manage_inventory_request = value.manage_inventory_request

        if (ctrl.manage_inventory_request) {
          ctrl.step = ctrl.manage_inventory_request.step
          ctrl.manage_inventory_id = ctrl.manage_inventory_request.id
          checkStep()
        }
      })
    }

    function checkStep() {
      $rootScope.backToDeleteInventory = null
      $rootScope.inventory_id_for_delete = null
      if (ctrl.step == 2) {
        if (ctrl.request_type == "request") {
          $rootScope.updateInventoryRequestStep4(ctrl.step, ctrl.real_id)
        } else {
          $rootScope.updateInventoryRequestStep2(ctrl.real_id)
        }
      } else if (ctrl.step == 3) {
        $rootScope.updateInventoryRequestStep3(ctrl.real_id)
      } else if (ctrl.step == 4) {
        $rootScope.updateInventoryRequestStep4(ctrl.real_id)
      } else if (ctrl.step == 5) {
        $rootScope.updateInventoryRequestStep5(ctrl.real_id)
      }
    }

    ctrl.accept = function() {
      var date_save_step1 = $filter('date')(new Date(), 'dd/MM/yyyy HH:mm')
      var step_num = 2
      if (ctrl.request_type == "request") {
        step_num = 4
      }
      var data = {
        manage_inventories_requests: {
          step: step_num,
          accept:  "",
          save_by: ctrl.name_setting,
          date_save_step1: date_save_step1
        }
      }
      if (ctrl.real_id) {
        service.pending(ctrl.real_id).then(function(resp) {
          if (ctrl.manage_inventory_id) {
            updateMangeInventory(data)
          } else {
            createManageInventory(data)
          }
        })
      }
    } 

    function createManageInventory(data) {
      service.createManageInventoryRequest(data, ctrl.real_id).then(function(resp) {
        save('accept')
      })
    }

    function updateMangeInventory(data) {
      service.updateManageInventoryRequest(data, ctrl.real_id , ctrl.manage_inventory_id).then(function(resp) {
        save('accept')
      })
    }
    
    ctrl.save = function(){
      save('save')
    }

    function save(checkState) {
    	var changePrice = parseFloat(ctrl.price)
    	var inventory_datas = {
        user_name: ctrl.user_name,
        item_name: ctrl.name,
        description: ctrl.description,
        price: changePrice,
        request_date: ctrl.datas.request_date,
        employee_id: ctrl.employee_id
      }
      if (ctrl.real_id) {
        updateInventoryRequest(inventory_datas, ctrl.real_id, checkState)
      }
    }

    function updateInventoryRequest(inventory_datas, id, checkState) {
    	service.updateInventoryRequest(inventory_datas, id).then(function(resp) {
        if (checkState != 'save') {
          if (ctrl.request_type == "request") {
            $rootScope.updateInventoryRequestStep4(ctrl.real_id)
          } else {
            $rootScope.updateInventoryRequestStep2(ctrl.real_id)
        }
        }else{
          $rootScope.openInventory(1)
        }
    	}, function(e){

    	})
    }

    ctrl.reject = function() {
      $rootScope.openConfirmationInventoryRequestModal(translateFilter("delete_expense"), function(){
        ctrl.comment = $rootScope.comment
        $rootScope.comment = null
        var changePrice = parseFloat(ctrl.price)
        var inventory_datas = {
          user_name: ctrl.user_name,
          item_name: ctrl.name,
          description: ctrl.description,
          price: changePrice,
          request_date: ctrl.datas.request_date,
          comment: ctrl.comment,
          employee_id: ctrl.employee_id
        }

        service.updateInventoryRequest(inventory_datas, ctrl.real_id).then(function(resp) {
          service.reject(ctrl.real_id).then(function(resp) {
            $window.history.back();
          })
        })
      })  
    } 

    ctrl.back = function() {
      $window.history.back();
    } 

    function getSetting() {
      settingService.getSetting().then(function(resp) {
        ctrl.name_setting  = resp.data.user.full_name
      })
    }

    ctrl.openRequestDatePopup = function() {
      ctrl.requestDatePopup.opened = true;
    };

    ctrl.requestDatePopup = {
      opened: false
    };

    getSetting()
    initData()

	}]);
})();