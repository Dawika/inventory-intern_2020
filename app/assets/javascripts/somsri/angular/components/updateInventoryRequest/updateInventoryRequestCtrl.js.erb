(function() {
  'use strict';
  angular.module('somsri.somsri.update_inventory_request', [])
    .controller('updateInventoryRequestCtrl', ['$compile', '$scope', '$window', '$filter', '$rootScope', '$timeout', 'translateFilter', '$uibModal', 'Upload', '$state', "inventoryRequestService","settingService" , 
      function($compile, $scope, $window, $filter, $rootScope, $timeout, translateFilter, $uibModal, Upload, $state, service, settingService) {
	$rootScope.menu = translateFilter("inventory_request")
		var ctrl = this
		ctrl.real_id = $state.params.id;
		ctrl.active = 1
		ctrl.step = {
    	step1: {
    		accept: "",
    		save_by: ""
    	},
    	step2: {
    		date_purchase: "",
    		date_send: "",
    		price: "",
    		save_by: ""
    	},
    	step3: {
    		get_date: "",
    		buy_slip: "",
    		end_warranty: "",
    		save_by: ""
    	},
    	step4: {
    		send_to_employee_name: "",
    		send_to_employee_id:"",
    		save_by: ""
    	}
    }

  	function initData() {
      if (!ctrl.real_id) { 
        return
      }

      service.show(ctrl.real_id).then(function(resp) {
        var value = resp.data
        ctrl.datas = resp.data
        ctrl.name = value.item_name
        ctrl.description = value.description
        ctrl.price = value.price
        ctrl.user_name = value.user_name
        ctrl.request_date = new Date(value.request_date)
        ctrl.employee_id = value.employee_id
        ctrl.request_type = value.request_type
        if (ctrl.request_type == "request") {
          ctrl.change_request_type = translateFilter("withdraw_equipment")
        } else {
          ctrl.change_request_type = translateFilter("new_request_inventory")
        }
        ctrl.inventory_status = value.inventory_status
        ctrl.step = value.manage_inventory
        ctrl.step_to = ctrl.step.step
        if (value.request_date) {
          ctrl.datas.request_date = new Date(ctrl.datas.request_date)
        } else {
          ctrl.datas.request_date = null
        }
        checkStep()
      })
    }

    function checkStep() {
      $rootScope.backToDeleteInventory = null
      $rootScope.inventory_id_for_delete = null
      if (ctrl.step_to == 1) {
        //2
        if (ctrl.request_type == "request") {
          $rootScope.updateInventoryRequestStep4(ctrl.step, ctrl.real_id)
        } else {
          $rootScope.updateInventoryRequestStep2(ctrl.step, ctrl.real_id)
        }
        
      } else if (ctrl.step_to == 2) {
        //3
        $rootScope.updateInventoryRequestStep3(ctrl.step, ctrl.real_id)
      } else if (ctrl.step_to == 3) {
        //4
        $rootScope.updateInventoryRequestStep4(ctrl.step, ctrl.real_id)
      } else if (ctrl.step_to == 4) {
        //5
        $rootScope.updateInventoryRequestStep5(ctrl.step, ctrl.real_id)
      } else if (ctrl.step_to == 5) {
        //5
        $rootScope.updateInventoryRequestStep5(ctrl.step, ctrl.real_id)
      }
    }

    ctrl.save = function() {

    	var changePrice = parseFloat(ctrl.price)

    	var inventory_datas = {
        user_name: ctrl.user_name,
        item_name: ctrl.name,
        description: ctrl.description,
        price: changePrice,
        request_date: ctrl.datas.request_date,
        employee_id: ctrl.employee_id
    	}

      if (ctrl.real_id) {
        updateInventoryRequest(inventory_datas, ctrl.real_id)
      } 
    }

    function updateInventoryRequest(inventory_datas, id) {
   
    	service.updateInventoryRequest(inventory_datas, id).then(function(resp) {
        // service.pending(ctrl.real_id).then(function(resp) {
          $window.history.back();//$rootScope.openInventory(1)
        // })
        
    	}, function(e){

    	})
    }

    function createManageImventory(data, str) {
      service.createManageInventoryRequest(data, ctrl.real_id).then(function(resp) {
        if (str == "accept") {
          if (ctrl.request_type == "request") {
            $rootScope.updateInventoryRequestStep4(ctrl.step, ctrl.real_id)
          } else {
            $rootScope.updateInventoryRequestStep2(ctrl.step, ctrl.real_id)
          }
        } else {
          $rootScope.openInventory(1)
        }
      })
    }

    ctrl.cancel = function() {
      $window.history.back();
    }

    ctrl.accept = function() {
      ctrl.step.step = 1
      ctrl.step.step1.accept = "accept"
      ctrl.step.step1.save_by = ctrl.name_setting
      var data = {
        manage_inventories_requests: {
          step: 1,
          accept:  "accept",
          save_by: ctrl.name_setting  
        }
      }

      service.pending(ctrl.real_id).then(function(resp) {
        createManageImventory(data, "accept")
      })
    } 

    ctrl.reject = function() {
      $rootScope.openConfirmationInventoryRequestModal(translateFilter("delete_expense"), function(){
        ctrl.comment = $rootScope.comment
        $rootScope.comment = null
        var changePrice = parseFloat(ctrl.price)
        var inventory_datas = {
          user_name: ctrl.user_name,
          item_name: ctrl.name,
          description: ctrl.description,
          price: changePrice,
          request_date: ctrl.datas.request_date,
          comment: ctrl.comment,
          employee_id: ctrl.employee_id
        }

        service.updateInventoryRequest(inventory_datas, ctrl.real_id).then(function(resp) {
          service.reject(ctrl.real_id).then(function(resp) {
            $window.history.back();
          })
        })
      })  
    }    

    function getSetting() {
      settingService.getSetting().then(function(resp) {
        ctrl.name_setting  = resp.data.user.full_name
      })
    }

    ctrl.openRequestDatePopup = function() {
      ctrl.requestDatePopup.opened = true;
    };

    ctrl.requestDatePopup = {
      opened: false
    };


    getSetting()
    initData()

	}]);
})();