(function() {
	angular.module('somsri.somsri.update_inventory_request_step2', [])
    .controller('updateInventoryRequestStep2Ctrl', ['$compile', '$scope', '$window', '$filter', '$rootScope', '$timeout', 'translateFilter', '$uibModal', 'Upload', '$state', "inventoryRequestService", "settingService" , 
    	function($compile, $scope, $window, $filter, $rootScope, $timeout, translateFilter, $uibModal, Upload, $state, service, settingService) {
	$rootScope.menu = translateFilter("inventory_request")
		var ctrl = this
		ctrl.real_id = $state.params.id;
		ctrl.date_purchase = ""//new Date()
		ctrl.date_send = ""//new Date()
		ctrl.step = $rootScope.step

    ctrl.openDatePurchasePopup = function() {
      ctrl.datePurchasePopup.opened = true;
    };

    ctrl.datePurchasePopup = {
      opened: false
    }; 


    ctrl.openDateSendPopup = function() {
      ctrl.dateSendPopup.opened = true;
    };

    ctrl.dateSendPopup = {
      opened: false
    };

    ctrl.openRequestDatePopup = function() {
      ctrl.requestDatePopup.opened = true;
    };

    ctrl.requestDatePopup = {
      opened: false
    };

    ctrl.continue = function() {
      beforeSave()
    }

    ctrl.cancel = function() {
      var data = {
        manage_inventories_requests: {
          step: 1
        }
      }

      service.updateManageInventoryRequest(data, ctrl.real_id , ctrl.manage_inventory_id).then(function(resp) {
        service.wait(ctrl.real_id).then(function(resp) {
          $window.history.back();
        })
      })
    }

    ctrl.backToRooView = function() {
      $rootScope.openInventory(1)
    }

    function beforeSave() {
      var changePrice = parseFloat(ctrl.price)
      if (ctrl.price_step2) {
        changePrice = parseFloat(ctrl.price_step2)
      }
      var checngeRequestDate = ctrl.datas.request_date// $filter('date')(new Date(ctrl.datas.request_date), 'yyyy-MM-ddTh:MM:ss')

      var inventory_datas = {
        user_name: ctrl.user_name,
        item_name: ctrl.name,
        description: ctrl.description,
        price: changePrice,
        request_date: checngeRequestDate,
        employee_id: ctrl.employee_id
      }

      if (ctrl.real_id) {
        updateInventoryRequest(inventory_datas, ctrl.real_id)
      } 
    }

    function updateInventoryRequest(inventory_datas, id) {
      var changePrice = parseFloat(ctrl.price_step2)
      var data = {
        manage_inventories_requests: {
          step: 3,
          save_by_step2: ctrl.name_setting,
          date_purchase: ctrl.date_purchase,
          date_send: ctrl.date_send,
          price: changePrice
        }
      }
      
    	service.updateInventoryRequest(inventory_datas, id).then(function(resp) {
    		if (!ctrl.manage_inventory_id) {
          createManageInventory(data)
    		} else {
    			updateManageInventory(data)
    		}
    		
    	}, function(e){

    	})
    }

	  function createManageInventory(data) {
      service.createManageInventoryRequest(data, ctrl.real_id).then(function(resp) {
        isSave()
      })
    }

    function updateManageInventory(data) {
    	service.updateManageInventoryRequest(data, ctrl.real_id , ctrl.manage_inventory_id).then(function(resp) {
        isSave()
    	})
    }

    function isSave() {
      service.purchasing(ctrl.real_id).then(function(resp) {
        $rootScope.updateInventoryRequestStep3(ctrl.real_id)
      })
    }

  	function initData() {
      if (!ctrl.real_id) { 
        return
      }

      service.show(ctrl.real_id).then(function(resp) {
        var value = resp.data
        ctrl.datas = resp.data
        ctrl.name = value.item_name
        ctrl.description = value.description
        ctrl.price = value.price
        ctrl.user_name = value.user_name
        ctrl.request_date = new Date(value.request_date)
        ctrl.inventory_status = value.inventory_status
        ctrl.employee_id = value.employee_id
        ctrl.request_type = value.request_type
        if (ctrl.request_type == "request") {
          ctrl.change_request_type = translateFilter("withdraw_equipment")
        } else {
          ctrl.change_request_type = translateFilter("new_request_inventory")
        }

        if (value.request_date) {
          ctrl.datas.request_date = new Date(ctrl.datas.request_date)
        } else {
          ctrl.datas.request_date = null
        }

        ctrl.manage_inventory_request = value.manage_inventory_request

        if (ctrl.manage_inventory_request) {
          ctrl.step = ctrl.manage_inventory_request.step
          ctrl.manage_inventory_id = ctrl.manage_inventory_request.id
          checkStep()
        }
        setData()
      })
    }

    function setData() {
    	//setp1
    	ctrl.save_by = ctrl.manage_inventory_request.save_by
			//setp2
			ctrl.save_by_step2 = ctrl.manage_inventory_request.save_by_step2
			ctrl.date_purchase = new Date(ctrl.manage_inventory_request.date_purchase)
			ctrl.date_send = new Date(ctrl.manage_inventory_request.date_send)
			ctrl.price_step2 = parseFloat(ctrl.manage_inventory_request.price)
    }

   	function checkStep() {
      if (!ctrl.step || ctrl.step == 1) {
        $rootScope.updateInventoryRequest(ctrl.real_id)
      } else if (ctrl.step == 3) {
        $rootScope.updateInventoryRequestStep3(ctrl.real_id)
      } else if (ctrl.step == 4) {
        $rootScope.updateInventoryRequestStep4(ctrl.real_id)
      } else if (ctrl.step == 5) {
        $rootScope.updateInventoryRequestStep5(ctrl.real_id)
      }
		}

		 function getSetting() {
    	settingService.getSetting().then(function(resp) {
      	ctrl.name_setting  = resp.data.user.full_name
    	})
  	}

  	getSetting()
  	initData()


	}]);
})();