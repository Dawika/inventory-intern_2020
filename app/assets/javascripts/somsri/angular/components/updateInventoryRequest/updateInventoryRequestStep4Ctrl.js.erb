(function() {
	angular.module('somsri.somsri.update_inventory_request_step4', [])
    .controller('updateInventoryRequestStep4Ctrl', ['$compile', '$scope', '$window', '$filter', '$rootScope', '$timeout', 'translateFilter', '$uibModal', 'Upload', '$state', "inventoryRequestService", "employeesService", "settingService" , "inventoryService", 
      function($compile, $scope, $window, $filter, $rootScope, $timeout, translateFilter, $uibModal, Upload, $state, service, employeesService, settingService, inventoryService) {
	$rootScope.menu = translateFilter("inventory_request")
		var ctrl = this
		ctrl.real_id = $state.params.id;
		ctrl.filterKeyword = ""
		ctrl.checkName = true
    ctrl.step = $rootScope.step
    ctrl.return_date = new Date()
    ctrl.show_return_date = false


    function initIventoryData() {
      if (!ctrl.real_id) { 
        return
      }

      ctrl.add_button = "edit"
      inventoryService.show(ctrl.inventory_id).then(function(resp) {
        var value = resp.data
        ctrl.datas = resp.data
        ctrl.inventory_requests = ctrl.datas.inventory_requests
        ctrl.request_count = ctrl.inventory_requests[0].request_count
        ctrl.name = value.item_name
        if (!ctrl.name) {
          ctrl.name = "-"
        }
        
        ctrl.serial_number = value.serial_number
        if (!ctrl.serial_number) {
          ctrl.serial_number = "-"
        }

        ctrl.model = value.model
        if (!ctrl.model) {
          ctrl.model = "-"
        }
        
        ctrl.iventory_description = value.description
        if (!ctrl.iventory_description) {
          ctrl.iventory_description = "-"
        }
        
        ctrl.inventory_price = value.price
        if (!ctrl.inventory_price) {
          ctrl.inventory_price = ""
        }

        if (value.date_purchase) {
          ctrl.datas.date_purchase = new Date(ctrl.datas.date_purchase)
        } else {
          ctrl.datas.date_purchase = null
        }

        if (value.end_warranty) {
          ctrl.datas.end_warranty = new Date(ctrl.datas.end_warranty)
        } else {
          ctrl.datas.end_warranty = null
        }
        ctrl.get_category_id = value.categories.id
        ctrl.category_id = value.categories.category_id
        ctrl.category = value.categories.category_name

        if (!ctrl.category) {
          ctrl.category = translateFilter("select_category")
        }
        
        ctrl.category_barcode = value.categories.category_barcode
        ctrl.date_add = value.date_add
        ctrl.inventory_employee_id = value.employee_id
      })
    }

    function initData() {
      if (!ctrl.real_id) { 
        return
      }

      service.show(ctrl.real_id).then(function(resp) {
        var value = resp.data
        ctrl.datas_step = resp.data
        ctrl.name = value.item_name
        ctrl.description = value.description
        ctrl.price = value.price
        ctrl.user_name = value.user_name
        ctrl.request_date = new Date(value.request_date)
        ctrl.inventory_status = value.inventory_status
        ctrl.employee_id_request = value.employee_id
        ctrl.request_type = value.request_type
        if (ctrl.request_type == "request") {
          ctrl.show_return_date = true
          ctrl.show_text = false
          ctrl.change_request_type = translateFilter("withdraw_equipment")
        } else {
          ctrl.show_return_date = false
          ctrl.show_text = true
          ctrl.change_request_type = translateFilter("new_request_inventory")
        }

        if (value.define_return_date) {
          ctrl.define_return_date = value.define_return_date
        }
    
        ctrl.inventory_id = value.inventory.id
        if (value.request_date) {
          ctrl.datas_step.request_date = new Date(value.request_date)
        } else {
          ctrl.datas_step.request_date = null
        }

        if (ctrl.inventory_id) {
          initIventoryData()
        }
        getEmployeeById(ctrl.employee_id_request)

        ctrl.manage_inventory_request = value.manage_inventory_request

        if (ctrl.manage_inventory_request) {
          ctrl.step = ctrl.manage_inventory_request.step
          ctrl.manage_inventory_id = ctrl.manage_inventory_request.id
          checkStep()
        }
        setData()
      })
    }

    function setData() {
      //setp1
      ctrl.save_by = ctrl.manage_inventory_request.save_by
      ctrl.date_save_step1 = $filter('date')(new Date(ctrl.manage_inventory_request.date_save_step1), 'dd/MM/yyyy HH:mm')
      //setp2
      ctrl.save_by_step2 = ctrl.manage_inventory_request.save_by_step2
      ctrl.date_purchase = $filter('date')(new Date(ctrl.manage_inventory_request.date_purchase), 'dd/MM/yyyy')
      ctrl.date_purchase_save = ctrl.manage_inventory_request.date_purchase
      ctrl.date_send = $filter('date')(new Date(ctrl.manage_inventory_request.date_send), 'dd/MM/yyyy')
      ctrl.date_send_save = ctrl.manage_inventory_request.date_send
      ctrl.price_step2 = parseFloat(ctrl.manage_inventory_request.price)
      ctrl.date_save_step2 = $filter('date')(new Date(ctrl.manage_inventory_request.date_save_step2), 'dd/MM/yyyy HH:mm')
      //setp3
      ctrl.get_date_save = ctrl.manage_inventory_request.get_date
      ctrl.get_date = $filter('date')(new Date(ctrl.manage_inventory_request.get_date), 'dd/MM/yyyy')
      ctrl.save_by_step3 = ctrl.manage_inventory_request.save_by_step3
      ctrl.date_get_inventory = ctrl.manage_inventory_request.get_date
      ctrl.buy_slip =ctrl.manage_inventory_request.buy_slip
      ctrl.end_warranty = $filter('date')(new Date(ctrl.manage_inventory_request.end_warranty), 'dd/MM/yyyy')
      ctrl.date_save_step3 = $filter('date')(new Date(ctrl.manage_inventory_request.date_save_step3), 'dd/MM/yyyy HH:mm')
      //step4
      ctrl.employee_name = ctrl.manage_inventory_request.send_to_employee_name
      ctrl.employee_id = ctrl.manage_inventory_request.send_to_employee_id
      ctrl.save_by_step4 = ctrl.manage_inventory_request.save_by_step4
    }

		function checkStep() {
      if (!ctrl.step || ctrl.step == 1) {
        $rootScope.updateInventoryRequest(ctrl.real_id)
      } else if (ctrl.step == 2) {
        $rootScope.updateInventoryRequestStep2(ctrl.real_id)
      } else if (ctrl.step == 3) {
        $rootScope.updateInventoryRequestStep3(ctrl.real_id)
      } else if (ctrl.step == 5) {
        $rootScope.updateInventoryRequestStep5(ctrl.real_id)
      }
		}

		function initDatas(){
       if(!ctrl.datas) { ctrl.datas = {} }
     }
	
	  function autoFillEmployee($item){
      if($item.id){
        for(var i = 0;i < ctrl.employee_lists.length; i++){
          if($item.id == ctrl.employee_lists[i].id){
            initDatas();
            ctrl.checkName = false
          }
        }
      }
    }

    function autoCheckName(data) {
    	if(data[0].id){
        for(var i = 0;i < ctrl.employee_lists.length; i++){
          if(data[0].id == ctrl.employee_lists[i].id){
            ctrl.checkName = false
            break
          } else {
        		ctrl.checkName = true
        	}
        }
      }
    }

    ctrl.onChangeName = function() {
    	var data = []
    	data.push({
    		name: ctrl.employee_name,
        id: ""
    	})
      autoCheckName(data);
    }

		ctrl.onSelectEmployeeFullName = function($item) {
      ctrl.employee_name = $item.name;
      ctrl.employee_id = $item.id
      autoFillEmployee($item);
     };

    function getEmployeeById(id) {
      if (id && id != 0) {
        employeesService.getEmployee(id).then(function(resp) {
          ctrl.employee_name = resp.data.employee_display_name
          ctrl.employee_id = resp.data.employee.id
        })
      }
    }

		function getEmployee(){
      ctrl.employee_lists = []
      ctrl.employee_lists.push({
        name: translateFilter("no_employee_selection"),
        id: ""
     	})

      employeesService.getAllEmployee().then(function(resp) {
        if (resp.data.length > 0) {
          for (var i = 0; i < resp.data.length; i++) {
            var employees = resp.data[i]
            if (employees.name !== ctrl.displayName) {
              ctrl.employee_lists.push({
                name: employees.name,
                id: employees.id
              })
            }
          }

          var data = []
          data.push({
            name: ctrl.employee_name,
            id: ctrl.employee_id
          })
          autoCheckName(data)
        }
      });
    };

    ctrl.save = function(){
      beforeUpdateInventoryRequest('save')
    }

    ctrl.continue = function() {
      if (ctrl.inventory_employee_id != ctrl.employee_id) {
        beforeSave()
      } else {
        beforeUpdateInventoryRequest('continue')
      }
    }

    function beforeSave() {
      var changePrice = parseFloat(ctrl.inventory_price);

      if (ctrl.category == translateFilter("select_category")) {
        ctrl.category = null
      }

      beforeCreate(changePrice)
    }

    function beforeCreate(changePrice) {

      var inventory_datas = {
        employee_id: ctrl.employee_id
      }
      updateInventory(inventory_datas, ctrl.inventory_id)
    }

    function updateInventory(inventory_datas, id) {
      inventoryService.updateInventory(inventory_datas, id).then(function(resp) {
        $rootScope.inventory_id = null
        beforeUpdateInventoryRequest('continue')
      },function(e) {
        // Error
      })
    }

    function beforeUpdateInventoryRequest(checkState) {

      var changePrice = parseFloat(ctrl.price)
      if (changePrice == ctrl.price_step2) {
        changePrice = parseFloat(ctrl.price_step2)
      }
      var checngeRequestDate = ctrl.datas_step.request_date//$filter('date')(new Date(ctrl.datas.request_date), 'yyyy-MM-ddTh:MM:ss')

      if (ctrl.request_type == "new") {
        ctrl.define_return_date = undefined
      }

      var inventory_datas = {
        user_name: ctrl.user_name,
        item_name: ctrl.name,
        description: ctrl.description,
        price: changePrice,
        request_date: checngeRequestDate,
        employee_id: ctrl.employee_id,
        define_return_date: ctrl.define_return_date
      }

      if (ctrl.real_id, checkState) {
        updateInventoryRequest(inventory_datas, ctrl.real_id, checkState)
      } 
    }

    function updateInventoryRequest(inventory_datas, id, checkState) {
      if (ctrl.checkName) {
        ctrl.employee_id = ""
      }

      if (ctrl.is_save) {
        ctrl.step_num = 4
      } else {
        ctrl.step_num = 4
      }

      var date_save_step4 = $filter('date')(new Date(), 'dd/MM/yyyy HH:mm')

      var data = {
        manage_inventories_requests: {
          step: 5,
          save_by_step4: ctrl.name_setting,
          send_to_employee_name: ctrl.employee_name,
          send_to_employee_id: ctrl.employee_id,
          date_save_step4: date_save_step4
        }
      }
      service.updateInventoryRequest(inventory_datas, id).then(function(resp) {
        if(checkState != 'save'){
          if (ctrl.manage_inventory_id) {
            updateManageInventory(data)
          } else {
            createManageInventory(data)
          }
        }else{
          $rootScope.openInventory(1)
        }
      }, function(e){

      })
    }

    function createManageInventory(data) {
      service.createManageInventoryRequest(data, ctrl.real_id).then(function(resp) {
        isSave()
      })
    }

    function updateManageInventory(data) {
      service.updateManageInventoryRequest(data, ctrl.real_id , ctrl.manage_inventory_id).then(function(resp) {
        isSave()
      })
    }

    function isSave() {
      service.assigned(ctrl.real_id).then(function(resp) {
        $rootScope.updateInventoryRequestStep5(ctrl.real_id)
      })
    }

    ctrl.cancel = function() {
      var step_num = 3
      if (ctrl.request_type == "request") {
        step_num = 1
      } 
      var data = {
        manage_inventories_requests: {
          step: step_num
        }
      }

      service.updateManageInventoryRequest(data, ctrl.real_id , ctrl.manage_inventory_id).then(function(resp) {
         updateStatus()
      })
    }

    function updateStatus() {
      if (ctrl.request_type == "request") {
        service.wait(ctrl.real_id).then(function(resp) {
          $window.history.back();
        })  
      } else {
        service.purchasing(ctrl.real_id).then(function(resp) {
          deleteInventory()
        })  
      }
      
    }

    function deleteInventory() {
      inventoryService.removeInventory(ctrl.inventory_id).then(function(resp) {
        $window.history.back();
        }, function(e){
      })
    }

    ctrl.backToRootView = function() {
       $rootScope.openInventory(1)
    }

    function getSetting() {
      settingService.getSetting().then(function(resp) {
        ctrl.name_setting = resp.data.user.full_name
      })
    }

    ctrl.openRequestDatePopup = function() {
      ctrl.requestDatePopup.opened = true;
    };

    ctrl.requestDatePopup = {
      opened: false
    };

    ctrl.openEndWarrantyPopup = function() {
      ctrl.endWarrantyPopup.opened = true;
    };

    ctrl.endWarrantyPopup = {
      opened: false
    };

    ctrl.openReturnDatePopup = function() {
      ctrl.returnDatePopup.opened = true;
    };

    ctrl.returnDatePopup = {
      opened: false
    };

    getSetting()
   	getEmployee()
    initData()
    
	}]);
})();