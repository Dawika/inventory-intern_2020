(function() {
	angular.module('somsri.somsri.update_inventory_request_step3', [])
    .controller('updateInventoryRequestStep3Ctrl', ['$compile', '$scope', '$window', '$filter', '$rootScope', '$timeout', 'translateFilter', '$uibModal', 'Upload', '$state', "inventoryRequestService", "settingService", 'inventoryService','inventorySupplierService', 
    	function($compile, $scope, $window, $filter, $rootScope, $timeout, translateFilter, $uibModal, Upload, $state, service, settingService, inventoryService, inventorySupplierService) {
	$rootScope.menu = translateFilter("inventory_request")
		var ctrl = this
		ctrl.real_id = $state.params.id;

		ctrl.date_get_inventory = null
    ctrl.buy_slip = ""
		ctrl.end_warranty = ""
		ctrl.step = $rootScope.step

    ctrl.serial_number = ""
    ctrl.model = ""
    ctrl.category = translateFilter("select_category")

    ctrl.item_catogery = [
      {name: "office_furniture", id: 1},
      {name: "equipment_computer", id: 2},
      {name: "office_supplies", id: 3},
      {name: "maintenance_equipment", id: 4},
      {name: "cleaning_products", id: 5},
      {name: "electronic_office_equipment", id: 6},
      {name: "paper_products", id: 7},
      {name: "meeting_presentation_equipment", id: 8},
      {name: "other", id: 9}
    ]
    ctrl.category_barcode_list = []

 		function initData() {
      if (!ctrl.real_id) { 
        return
      }

      service.show(ctrl.real_id).then(function(resp) {
        var value = resp.data
        ctrl.datas = resp.data
        ctrl.name = value.item_name
        ctrl.description = value.description
        ctrl.price = value.price
        ctrl.user_name = value.user_name
        ctrl.request_date = new Date(value.request_date)
        ctrl.inventory_status = value.inventory_status
        ctrl.employee_id = value.employee_id
        ctrl.manage_inventory = value.manage_inventory

        ctrl.step_to = ctrl.manage_inventory.step
	      ctrl.manage_inventory_id = ctrl.manage_inventory.id
        ctrl.request_type = value.request_type
        if (ctrl.request_type == "request") {
          ctrl.change_request_type = translateFilter("withdraw_equipment")
        } else {
          ctrl.change_request_type = translateFilter("new_request_inventory")
        }
        if (value.request_date) {
          ctrl.datas.request_date = new Date(ctrl.datas.request_date)
        } else {
          ctrl.datas.request_date = null
        }
        checkStep()
      })
    }

    function setData() {
      if (ctrl.step_to) {
        ctrl.step = ctrl.manage_inventory
        //setp1
        ctrl.save_by = ctrl.manage_inventory.step1.save_by
        //setp2
        ctrl.save_by_step2 = ctrl.manage_inventory.step2.save_by
        ctrl.date_purchase_save = ctrl.manage_inventory.step2.date_purchase
        ctrl.date_send_save = ctrl.manage_inventory.step2.date_send
        ctrl.date_purchase = $filter('date')(new Date(ctrl.manage_inventory.step2.date_purchase), 'dd/MM/yyyy')
        ctrl.date_send = $filter('date')(new Date(ctrl.manage_inventory.step2.date_send), 'dd/MM/yyyy')
        ctrl.price_step2 = ctrl.manage_inventory.step2.price
        //setp3
        ctrl.save_by_step3 = ctrl.manage_inventory.step3.save_by
        ctrl.date_get_inventory = ctrl.manage_inventory.step3.get_date
        ctrl.buy_slip = ctrl.manage_inventory.step3.buy_slip
        ctrl.end_warranty = ctrl.manage_inventory.step3.end_warranty
      }
    }

		function checkStep() {
			if(!ctrl.step) {
        if (ctrl.step_to == 2) {
          setData()
        } else {
          if (ctrl.real_id) {
            $rootScope.updateInventoryRequest(ctrl.real_id)
          }
        }
			} else {
        //setp1
				ctrl.save_by = ctrl.step.step1.save_by
        //setp2
				ctrl.save_by_step2 = ctrl.step.step2.save_by
        ctrl.date_purchase_save = ctrl.step.step2.date_purchase
        ctrl.date_send_save = ctrl.step.step2.date_send
				ctrl.date_purchase = $filter('date')(new Date(ctrl.step.step2.date_purchase), 'dd/MM/yyyy')
				ctrl.date_send = $filter('date')(new Date(ctrl.step.step2.date_send), 'dd/MM/yyyy')
				ctrl.price_step2 = ctrl.step.step2.price
				//setp3
				ctrl.save_by_step3 = ctrl.step.step3.save_by
				ctrl.date_get_inventory = new Date(ctrl.step.step3.get_date)
        if (!ctrl.step.step3.get_date) {
          ctrl.date_get_inventory = ""
        }
				ctrl.buy_slip = ctrl.step.step3.buy_slip
				ctrl.end_warranty = new Date(ctrl.step.step3.end_warranty)
        if (!ctrl.step.step3.end_warranty) {
          ctrl.end_warranty = ""
        }
			} 
		}

		ctrl.continue = function() {
    	ctrl.step.step3.get_date = ctrl.date_get_inventory
    	ctrl.step.step3.buy_slip = ctrl.buy_slip
    	ctrl.step.step3.end_warranty = ctrl.end_warranty
    	ctrl.step.step3.save_by = ctrl.name_setting
      ctrl.is_save = false
      checkGetDatePurchase()
    }

    ctrl.cancel = function() {
      var data = {
        manage_inventories_requests: {
          step: 1
        }
      }

      service.updateManageInventoryRequest(data, ctrl.real_id , ctrl.manage_inventory_id).then(function(resp) {
        service.purchasing(ctrl.real_id).then(function(resp) {
          
        })
      })
      $window.history.back();
    }

    function beforeBackToRootView() {
      if (ctrl.step_to == 1) {
        service.pending(ctrl.real_id).then(function(resp) {
          $rootScope.openInventory(1)
        })
      } else if (ctrl.step_to == 2) {
        service.purchasing(ctrl.real_id).then(function(resp) {
          $rootScope.openInventory(1)
        })
      }
    }

    ctrl.backToRooView = function() {
      beforeBackToRootView()
    }

    ctrl.save = function() {
      ctrl.is_save = true
      checkGetDatePurchase()
  	}

    function checkGetDatePurchase() {
      if(ctrl.date_get_inventory && !ctrl.is_save) {
        service.done(ctrl.real_id).then(function(resp) {
          beforeSave()
        })
      } else {
        beforeUpdateRequest() 
      }
    }


    function beforeSave() {
      var changePrice = parseFloat(ctrl.price);
      ctrl.date_add = Date()

      if (ctrl.category == translateFilter("select_category")) {
        ctrl.category = null
      }

      generateCategoryBarcode(ctrl.category)
      beforeCreate(changePrice)
    }

    function beforeCreate(changePrice) {

      if (!ctrl.serial_number) {
        ctrl.serial_number = "-"
      }

      if (!ctrl.model) {
        ctrl.model = "-"
      }

      if (!ctrl.description) {
        ctrl.description = "-"
      }

      if (!ctrl.employee_id || ctrl.employee_id == 0) {
        ctrl.employee_name = ""
      }

      var inventory_datas = {
        item_name: ctrl.name,
        serial_number: ctrl.serial_number,
        model: ctrl.model,
        description: ctrl.description,
        price: changePrice,
        date_purchase: ctrl.date_purchase_save,
        date_add: ctrl.date_add,
        end_warranty: ctrl.end_warranty,
        employee_id: ctrl.employee_id,
        supplier_id: ctrl.supplier_id
      }

      var category_datas = {
        categories: {
          category_id: ctrl.category_id,
          category_name: ctrl.category,
          category_barcode: ctrl.category_barcode
        }
      }

      createInventory(inventory_datas, category_datas)
    }


    function createInventory(inventory_datas, category_datas) {
       inventoryService.newInventory(inventory_datas).then(function(resp) {
          createCategory(resp.data.id, category_datas)
      }, function(e){
        // Error
      });
    }

    function createCategory(inventory_id, data) {
      inventoryService.createCategory(inventory_id, data).then(function(resp) {
        ctrl.step.inventory_id = inventory_id
        beforeUpdateRequest(inventory_id)
      })
    }

    function beforeUpdateRequest(inventory_id) {
      var changePrice = parseFloat(ctrl.price)
      if (ctrl.price_step2) {
        changePrice = parseFloat(ctrl.price_step2)
      }
      var checngeRequestDate = ctrl.datas.request_date //$filter('date')(new Date(ctrl.datas.request_date), 'yyyy-MM-ddTh:MM:ss')

      var inventory_datas = {
        user_name: ctrl.user_name,
        item_name: ctrl.name,
        description: ctrl.description,
        price: changePrice,
        request_date: checngeRequestDate,
        employee_id: ctrl.employee_id,
        inventory_id: inventory_id

      }

      if (ctrl.real_id) {
        updateInventoryRequest(inventory_datas, ctrl.real_id, inventory_id)
      } 
    }
    
    function updateInventoryRequest(inventory_datas, id, inventory_id) {
      var step = 2
      if (ctrl.date_get_inventory && !ctrl.is_save) {
        step = 3
      }
 
      var data = {
        manage_inventories_requests: {
          step: step,
          accept: "accept",
          save_by: ctrl.save_by,
          save_by_step2: ctrl.save_by_step2,
          date_purchase: ctrl.date_purchase_save,
          date_send: ctrl.date_send_save,
          price: ctrl.price_step2,
          save_by_step3: ctrl.name_setting,
          get_date: ctrl.date_get_inventory,
          buy_slip: ctrl.buy_slip,
          end_warranty: ctrl.end_warranty,
          inventory_id: inventory_id
        }
      }

    	service.updateInventoryRequest(inventory_datas, id).then(function(resp) {
    		if (!ctrl.manage_inventory_id) {
    			updateManageInventory(data)
    		} else {
    			createManageInventory(data)
    		}
    	}, function(e){

    	})
    }

	  function createManageInventory(data) {
      service.createManageInventoryRequest(data, ctrl.real_id).then(function(resp) {
        isSave()
      })
    }

    function updateManageInventory(data) {
    	service.updateManageInventoryRequest(data, ctrl.real_id , ctrl.manage_inventory_id).then(function(resp) {
        isSave()
    	})
	  }


    function isSave() {
      if (ctrl.is_save) {
        $rootScope.openInventory(1)
      } else {
        service.done(ctrl.real_id).then(function(resp) {
          $rootScope.updateInventoryRequestStep4(ctrl.step, ctrl.real_id)
        })
      }
    }

    ctrl.opengetInventorytDatePopup = function() {
      ctrl.getInventoryDatePopup.opened = true;
    };

    ctrl.getInventoryDatePopup = {
      opened: false
    }; 


    ctrl.openEndwarrantytDatePopup = function() {
      ctrl.endWarrantyDatePopup.opened = true;
    };

    ctrl.endWarrantyDatePopup = {
      opened: false
    };


	 	function getSetting() {
  		settingService.getSetting().then(function(resp) {
    		ctrl.name_setting  = resp.data.user.full_name
  		})
		}

    ctrl.switchCategory = function() {
      for( var i = 0; i < ctrl.item_catogery.length; i++ ) {
        if (ctrl.item_catogery[i].name == ctrl.category) {
          ctrl.category = ctrl.item_catogery[i].name
          ctrl.category_id = ctrl.item_catogery[i].id
        }
      }
    }

    function generateCategoryBarcode(str) {
      ctrl.barcode = ""
      var random = randomNumber()
      switch(str) {
        case 'office_furniture': 
           ctrl.barcode = "fu"
          break
        case 'equipment_computer': 
           ctrl.barcode = "co"
          break
        case 'office_supplies': 
           ctrl.barcode = "or"
          break
        case 'maintenance_equipment': 
           ctrl.barcode = "ma"
          break
        case 'cleaning_products': 
           ctrl.barcode = "cl"
          break
        case 'electronic_office_equipment': 
           ctrl.barcode = "el"
          break
        case 'paper_products': 
           ctrl.barcode = "pa"
        break
        case 'meeting_presentation_equipment': 
           ctrl.barcode = "pr"
          break
        case 'other':
          ctrl.barcode = "oh"
          break
        default :
          ctrl.barcode = "oh"
          break  
      }

      ctrl.barcode = ctrl.barcode+random

      var check = false
      for(var i = 0; i < ctrl.category_barcode_list.length; i++) {
        if (ctrl.barcode === ctrl.category_barcode_list[i]) {
          check = true
          break
        }
      }

      if (check) {
        generateCategoryBarcode(str)
      }

      ctrl.category_barcode = ctrl.barcode
    }

    function randomNumber() {
      return Math.floor(100000+Math.random() * 9999)
    }

    function getInventoryList() {
      inventoryService.getInventory().then(function(resp) {
        for (var i = 0; i < resp.data.inventories.length; i++) {
          ctrl.category_barcode_list.push(resp.data.inventories[i].category_barcode)
        }
      })
    }

    function getSupplierList() {
      ctrl.supplier_lists = []
      inventorySupplierService.getAllSuppliers().then(function(resp) {
        if (resp.data.length > 0){
          for (var i = 0; i < resp.data.length; i++) {
            var supplier = resp.data[i]
            if (supplier.name != ctrl.supplierDisplayName) {
              ctrl.supplier_lists.push({
                name: supplier.name,
                id: supplier.id
              })
            }
          }
        }
      })
    }

    ctrl.onSelectSupplier = function($item) {
      ctrl.supplier_name = $item.name;
      ctrl.supplier_id = $item.id
    };

    ctrl.onChangeSupplier = function() {
      ctrl.supplier_name = ctrl.supplier_name
      ctrl.supplier_id = ""
    }

    ctrl.openAddSupplierModal = function() {
      $rootScope.appSupplierModal(translateFilter('add_supplier'), function(){
        ctrl.supplier_id = $rootScope.supplier_id
        ctrl.supplier_name = $rootScope.supplier_name
        $rootScope.supplier_id = null
        $rootScope.supplier_name = null
      })
    }

    ctrl.openRequestDatePopup = function() {
      ctrl.requestDatePopup.opened = true;
    };

    ctrl.requestDatePopup = {
      opened: false
    };

    function deleteInventory() {
      ctrl.deleteInventory = $rootScope.backToDeleteInventory
      var inventory_id_for_delete = $rootScope.inventory_id_for_delete
      $rootScope.backToDeleteInventory = null
      $rootScope.inventory_id_for_delete = null
      if(ctrl.deleteInventory && inventory_id_for_delete) {
        inventoryService.removeInventory(inventory_id_for_delete).then(function(resp) {
      
          }, function(e){
        })
      }
    }

    
    getSupplierList()
    getInventoryList()
    getSetting()
    initData()
    deleteInventory()
	}]);
})();