(function() {
  'use strict';
  angular.module('somsri.somsri.vacation.dashboard', [
  ])
  .controller('vacationDashboardCtrl', ['$rootScope', '$window', '$sce', 'moment', 'translateFilter', 'vacationService', function ($rootScope, $window, $sce, moment, translateFilter, service) {
    var ctrl = this;

    var status = window.location.href.substr(window.location.href.lastIndexOf('/') + 1);
    if (status != "") {
      if (status == "approved") {
        $rootScope.openSuccessModal(translateFilter('vacation_was_approved'));
      } else if (status == "rejected") {
        $rootScope.openSuccessModal(translateFilter('vacation_was_rejected'));
      } else if (status == "error") {
        $rootScope.openErrorModal(translateFilter('vacation_save_error'));
      }
    }

    $rootScope.menu = translateFilter('dashboard');
    $rootScope.loadAndAuthorizeResource("vacation", function() {
      loadVacationDashboard();
    });

    ctrl.deleteVacation = function(vacationId) {
      $rootScope.openConfirmationModal(translateFilter("confirm_delete_vacation"), function() {
        service.deleteVacation(vacationId).then(function(response) {
          loadVacationDashboard();
          $rootScope.openSuccessModal(translateFilter('vacation_deleted_success'));
        }, function(e) {
          console.log(e)
        });
      });
    };

    ctrl.end_date = new Date();
    ctrl.start_date = new Date();

    ctrl.optionsChange = function() {
      if (ctrl.start_date === undefined || ctrl.end_date === undefined) {
        return
      }
    };
    ctrl.openStartDatePopup = function() {
      ctrl.startDatePopup.opened = true;
    };
    ctrl.openEndDatePopup = function() {
      ctrl.endDatePopup.opened = true;
    };
    ctrl.startDatePopup = { opened: false };
    ctrl.endDatePopup = { opened: false };

    ctrl.selectedVacationType = "sick_leave";
    ctrl.selectedVacationLeaveType = "vacation_leave_full_day";
    ctrl.vacationTypeChanged = function(selectedVacationType) {
      ctrl.showVacationLeaveType = selectedVacationType == 'vacation_leave';

      if (selectedVacationType == 'sick_leave') {
        ctrl.leaveHint = $sce.trustAsHtml("<b>หมายเหตุ</b> : การลาป่วย สามารถลาได้ตามสมควร ถ้าเกิน 3 วันต้องมีหนังสือรับรองจากแพทย์ หรือ ใบเสร็จรับเงินจากคลินิค, โรงพยาบาล");
      } else if (selectedVacationType == 'vacation_leave') {
        ctrl.leaveHint = $sce.trustAsHtml("<b>หมายเหตุ</b> : ลากิจ หรือ พักร้อน ต้องลาล่วงหน้าอย่างน้อย " + ctrl.vacationConfig.vacation_leave_advance_at_least + " วัน เป็นลายลักษณ์อักษร ทาง Banana Vacation (http://vacation.bananacoding.com), email หรือ slack");
      } else if (selectedVacationType == 'switch_date') {
        ctrl.leaveHint = $sce.trustAsHtml("<b>หมายเหตุ</b> : สลับวันทำงาน ต้องแจ้งล่วงหน้าอย่างน้อย " + ctrl.vacationConfig.switch_date_advance_at_least + " วัน เป็นลายลักษณ์อักษร ทาง Banana Vacation (http://vacation.bananacoding.com), email หรือ slack");
      } else if (selectedVacationType == 'work_at_home') {
        ctrl.leaveHint = $sce.trustAsHtml("<b>หมายเหตุ</b> : ทำงานนอกสถามที่ หรือ ที่บ้าน สามารถทำได้ " + ctrl.vacationConfig.work_at_home_limit + " วันต่อสัปดาห์ ต้องแจ้งทาง Banana Vacation (http://vacation.bananacoding.com), email หรือ slack");
      }
    };
    ctrl.vacationLeaveTypeChanged = function(selectedVacationLeaveType) {

    };
    ctrl.vacationTypeChanged('sick_leave');
    ctrl.submitLeaveRequest = function() {
      ctrl.errorMessage = '';
      var startDate = moment(ctrl.start_date);
      var endDate = moment(ctrl.end_date);
      if (startDate.isAfter(endDate, 'days') || startDate.isBefore(moment(), 'days')) {
        ctrl.errorMessage = 'วันที่ไม่ถูกต้อง';
        return;
      }
      if (ctrl.selectedVacationType == 'sick_leave') {
        sendLeaveRequest(ctrl.selectedVacationType);
      } else if (ctrl.selectedVacationType == 'vacation_leave') {
        if (ctrl.vacationConfig.leave_remaining == 0) {
          ctrl.errorMessage = 'วันลาของคุณหมดแล้ว';
        } else {
          var minimumLeaveDate = moment().add(ctrl.vacationConfig.vacation_leave_advance_at_least, 'days')
          if (startDate.diff(minimumLeaveDate, 'days') < 0) {
            ctrl.errorMessage = 'กรุณาแจ้งล่วงหน้าอย่างน้อย ' + ctrl.vacationConfig.vacation_leave_advance_at_least + ' วัน';
          }
          sendLeaveRequest(ctrl.selectedVacationLeaveType);
        }
      } else if (ctrl.selectedVacationType == 'switch_date') {
        var minimumLeaveDate = moment().add(ctrl.vacationConfig.switch_date_advance_at_least, 'days')
        if (startDate.isSame(endDate, 'days')) {
          ctrl.errorMessage = 'ไม่สามารถสลับวันทำงานเป็นวันเดียวกันได้'
        } else if (startDate.diff(minimumLeaveDate, 'days') < 0) {
          ctrl.errorMessage = 'กรุณาแจ้งล่วงหน้าอย่างน้อย ' + ctrl.vacationConfig.switch_date_advance_at_least + ' วัน';
        } else {
          sendLeaveRequest(ctrl.selectedVacationType);
        }
      } else if (ctrl.selectedVacationType == 'work_at_home') {
        if (ctrl.vacationConfig.work_at_home_remaining == 0) {
          ctrl.errorMessage = 'คุณทำงานที่บ้านครบกำหนดแล้ว';
        } else {
          sendLeaveRequest(ctrl.selectedVacationType);
        }
      }
    };

    function loadVacationDashboard() {
      service.getVacations().then(function(response) {
        ctrl.leave_allowance = response.data.leave_allowance;
        ctrl.remaining_day = response.data.remaining_day;
        ctrl.sick_leave = response.data.sick_leave;
        ctrl.vacation_leave = response.data.vacation_leave;
        ctrl.switch_date = response.data.switch_date;
        ctrl.work_at_home = response.data.work_at_home;
        ctrl.vacations = response.data.vacations;
      }, function(e) {
        console.log(e)
      });
      service.getVacationConfigs().then(function(response) {
        ctrl.vacationConfig = response.data;
      }, function(e) {
        console.log(e)
      });
    }

    function sendLeaveRequest(vacationType) {
      ctrl.isSaving = true;
      service.newVacation({
        vacation_type: vacationType,
        start_date: moment(ctrl.start_date).format('DD/MM/YYYY'),
        end_date: moment(ctrl.end_date).format('DD/MM/YYYY'),
        detail: ctrl.detail
      }).then(function(response) {
        loadVacationDashboard();
        angular.element('#leaveSubmissionModal').modal('hide');
        $rootScope.openSuccessModal(translateFilter('vacation_saved_success'));
        ctrl.isSaving = false;
      }, function(e) {
        ctrl.isSaving = false;
        console.log(e)
      });
    }
  }]);
})();
