(function() {
  'use strict';
  angular.module('somsri.somsri.inventory', [])
  .controller('inventoryCtrl', ['$compile', '$scope', '$window', '$filter', '$rootScope', '$timeout', 'translateFilter', '$uibModal', 'Upload', "inventoryService", "inventoryRequestService", function($compile, $scope, $window, $filter, $rootScope, $timeout, translateFilter, $uibModal, Upload, services, inventoryRequestService) {
    $rootScope.menu = translateFilter("inventory")
    var ctrl = this
    var angularScopeRoot = 'angular.element(document.getElementById("angularCtrl")).scope().$root'
    var angularScopeInventory = 'angular.element(document.getElementById("angularCtrl")).scope().inventoryCtrl'
    var angularCtrlStr = "angular.element(document.getElementById('angularCtrl')).scope().inventory"
    // var alumni = "angular.element(document.getElementById('angularCtrl')).scope().alumni"
    ctrl.inventory = [];
    ctrl.message = '';
  $rootScope.loadAndAuthorizeResource("inventory", function(){
    var inventory_table = $('#inventory-table');
    var inventory_request_table = $('#inventory-request-table');
    ctrl.currentPage = 1;
    ctrl.requestCurrentPage = 1;
    ctrl.sort = 'inventories.id';
    ctrl.activeTab = 'inventory_info';

    // default last 7 days
    ctrl.end_date = new Date();
    ctrl.start_date = new Date(new Date().setMonth(new Date().getMonth() - 1));

    function cleanDate(date){
      if(!date || new Date(date) == "Invalid Date"){return;}
      var nowDate = new Date()
      date.setHours(nowDate.getHours())
      date.setMinutes(nowDate.getMinutes())        
      date.setSeconds(nowDate.getSeconds())
      return date
    }

    function filterDate(value, row, index) {
      if (value) {
        return $filter('date')(value, 'd/MM/yyyy');
      }
      return "-";
    }

    var bootstrapTableOptionsInventory = {
      onSort: function(item_name, order) {
        ctrl.sort = item_name;
        ctrl.order = order;
      },
      customSort: function(){},
      columns : [{
        field: 'id',
        title: '#',
        classes: 'text-right',
        sortable: true,
      },{
        field: 'item_name',
        title: translateFilter("item_name"),
        sortable: true,
      },{
        field: 'serial_number',
        title: translateFilter("serial_number"),
        sortable: true,
      },{
        field: 'model',
        title: translateFilter("model"),
        sortable: true,
      },{
        field: 'description',
        title: translateFilter("description"),
        sortable: true,
      },{
        field: 'price',
        title: translateFilter("price"),
        sortable: true,
      },{
        field: 'date_purchase',
        title: translateFilter("date_purchase"),
        sortable: true,
      },{
        field: 'category',
        title: translateFilter("category"),
        sortable: true,
        formatter: filterDate
      },{
        field: 'date_add',
        title: translateFilter("date_add"),
        sortable: true,
        formatter: filterDate
      },{
        field: 'edit',
        title: "",
        sortable: false,
        formatter : editInventoryFormatter
      },{
        field: 'delete',
        title: "",
        sortable: false,
        formatter : deleteInventoryFormatter
      }]
    }

    inventory_table.bootstrapTable($.extend(bootstrapTableOptionsInventory, {toolbar: "date-filter"}));

    function getInventory() {
      ctrl.start_date = cleanDate(ctrl.start_date)
      ctrl.end_date = cleanDate(ctrl.end_date)
      if(!ctrl.currentPage){ ctrl.currentPage = 1 }
        services.getInventory(ctrl.currentPage).then(function(resp) {
          ctrl.datasExport = [];
          if (resp.data) {
            ctrl.totalItems = resp.data.total_records;
            ctrl.currentPage = resp.data.current_page;
            ctrl.datasExport = resp.data.inventories
          } else {
            ctrl.totalItems = 0;
            ctrl.currentPage = 0;
          }
          ctrl.paginateButtonMaxSize = 5;
          inventory_table.bootstrapTable('load', ctrl.datasExport);
        });
    }

    ctrl.pageChanged = function() {
      getInventory()
    };

    function editInventoryFormatter(value, row, index) {
      return '<a id="editInventory' + row['id'] + '" onclick="' + angularCtrlStr + '.editInventory(' + row['id'] + ')"> <i class=\'fa fa-pencil-square-o fa-fw\'></i> </a>';
    }

    ctrl.editInventory = function(id) {
      $rootScope.updateInventory(id)
    }

    function deleteInventoryFormatter(value, row, index) {
      return '<a id="deleteInventory' + row['id'] + '" onclick="' + angularCtrlStr + '.deleteInventory(' + row['id'] + ')"> <i class=\'fa fa-trash color-red fa-fw\'></i></i> </a>';
    }

    ctrl.deleteInventory = function(id) {
     openConfirmationModal(translateFilter('delete_expense'), function(){
        services.removeInventory(id).then(function(resp) {
          getInventory()
          ctrl.message = translateFilter('inventory_delete_success')
          ctrl.typeSuccess = true
        }, function(e){
          ctrl.message = translateFilter('inventory_delete_failed')
          ctrl.typeSuccess = false
        })
      })   
    }

    function openConfirmationModal(message, success, dismiss) {
      $scope.message = message;
      $uibModal.open({
        animation: true,
        backdrop: 'static',
        keyboard: false,
        scope: $scope,
        templateUrl: "<%= asset_path('somsri/angular/components/modal/confirm/confirmModalView.html') %>",
        controller: 'confirmModalCtrl as confirm',
        size: 'md',
        resolve: {
          resources: ['$ocLazyLoad', 'ASSETS', function($ocLazyLoad, ASSETS) {
            return $ocLazyLoad.load([
              ASSETS.somsri.somsri.confirm_modal
            ]);
          }]
        }
      }).result.then(function (result) {
        if (result) {
          if(success){ success() }
        }else{
          if(dismiss){ dismiss() }
        }
      });
    }

    getInventory();

    var bootstrapTableOptionsInvetoryRequest = {
      onSort: function(item_name, order) {
        ctrl.sort = item_name;
        ctrl.order = order;
      },
      customSort: function(){},
      columns : [{
        field: 'id',
        title: '#',
        classes: 'text-right',
        sortable: true,
      },{
        field: 'user_name',
        title: translateFilter("User"),
        sortable: true,
      },{
        field: 'item_name',
        title: translateFilter("item_name"),
        sortable: true,
      },{
        field: 'description',
        title: translateFilter("description"),
        sortable: true,
      },{
        field: 'price',
        title: translateFilter("price"),
        sortable: true,
      },{
        field: 'request_date',
        title: translateFilter("request_date"),
        sortable: true,
      },{
        field: 'status',
        title: translateFilter("status"),
        sortable: true,
        formatter: filterDate
      },{
        field: 'edit',
        title: "",
        sortable: false,
        formatter : editInventoryRequestFormatter
      },{
        field: 'delete',
        title: "",
        sortable: false,
        formatter : deleteInventoryRequestFormatter
      }]
    }

    inventory_request_table.bootstrapTable($.extend(bootstrapTableOptionsInvetoryRequest, {toolbar: "date-filter"}));

    function getInventoryRequest() {
      ctrl.start_date = cleanDate(ctrl.start_date)
      ctrl.end_date = cleanDate(ctrl.end_date)
      if(!ctrl.requestCurrentPage){ ctrl.requestCurrentPage = 1 }
        inventoryRequestService.getInventoryRequest(ctrl.requestCurrentPage).then(function(resp) {
          ctrl.datasReuestExport = [];
          if (resp.data) {
            ctrl.requestTotalItems = resp.data.total_records;
            ctrl.requestCurrentPage = resp.data.current_page;
            ctrl.datasReuestExport = resp.data.inventories_requests
          } else {
            ctrl.requestTotalItems = 0;
            ctrl.requestCurrentPage = 0;
          }
          ctrl.paginateButtonMaxSize = 5;
          inventory_request_table.bootstrapTable('load', ctrl.datasReuestExport);
        });
    }

    ctrl.pageRequestChanged = function() {
      getInventoryRequest()
    };

    // function managerInventoryRequestFormatter(value, row, index) {
    //   return '<a id="managerInventoryRequest' + row['id'] + '" onclick="' + angularCtrlStr + '.managerInventoryRequest(' + row['id'] + ')"> <i>จัดการ</i> </a>';
    // }

    // ctrl.managerInventoryRequest = function(id) {
    //   $rootScope.updateInventory(id)
    // }


    function editInventoryRequestFormatter(value, row, index) {
      return '<a id="editInventoryRequest' + row['id'] + '" onclick="' + angularCtrlStr + '.editInventoryRequest(' + row['id'] + ')"> <i class=\'fa fa-pencil-square-o fa-fw\'></i> </a>';
    }

    ctrl.editInventoryRequest = function(id) {
      $rootScope.updateInventory(id)
    }

    function deleteInventoryRequestFormatter(value, row, index) {
      return '<a id="deleteInventoryRequest' + row['id'] + '" onclick="' + angularCtrlStr + '.deleteInventoryRequest(' + row['id'] + ')"> <i class=\'fa fa-trash color-red fa-fw\'></i></i> </a>';
    }

    ctrl.deleteInventoryRequest = function(id) {
      openConfirmationModal(translateFilter('delete_expense'), function(){
        inventoryRequestService.removeInventoryRequest(id).then(function(resp) {
          getInventoryRequest()
          ctrl.message = translateFilter('inventory_request_delete_success')
          ctrl.typeSuccess = true
        }, function(e){
          ctrl.message = translateFilter('inventory_request_delete_failed')
          ctrl.typeSuccess = false
        })
      })
    }

    getInventoryRequest();

  });
  }]);
})();
