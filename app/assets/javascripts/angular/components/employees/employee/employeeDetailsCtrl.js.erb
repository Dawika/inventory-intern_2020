(function() {
  'use strict';
  angular.module('somsri.payroll.employee_details', [
  ])
  .controller('employeeDetailsCtrl', ['employeesService','$log', '$state', '$rootScope','$scope', '$uibModal', 'reportService', '$filter', function(service, $log, $state, $rootScope, $scope, $uibModal, reportService, $filter) {
    $rootScope.menu = "Employees"
    var ctrl = this
    var dateNow = new Date();
    var employeeId = $state.params.id;
    var lastestMonth = "";
    ctrl.currentMonth = "";
    ctrl.empId = employeeId
    ctrl.isEdit = employeeId > 0 ? true : false
    ctrl.data = { employee: {}}
    ctrl.isSubmit = false;
    ctrl.isLastestPayroll = true;

    function openConfirmationModal(message, success, dismiss) {
      $scope.message = message;
      $uibModal.open({
        animation: true,
        backdrop: 'static',
        keyboard: false,
        scope: $scope,
        templateUrl: "<%= asset_path('angular/components/modal/confirm/confirmModalView.html') %>",
        controller: 'confirmModalCtrl as confirm',
        size: 'md',
        resolve: {
          resources: ['$ocLazyLoad', 'ASSETS', function($ocLazyLoad, ASSETS) {
            return $ocLazyLoad.load([
              ASSETS.somsri.payroll.confirm_modal
            ]);
          }]
        }
      }).result.then(function (isConfirm) {
        if (isConfirm) {
          if(success){ success() }
        }else{
          if(dismiss){ dismiss() }
        }
      });
    }

    function isPayrollChange(){
      if(ctrl.isLastestPayroll){
        var keys = Object.keys(ctrl.datas_original.payroll)
        for(var i = 1; i < keys.length; i++){
          if(ctrl.datas.payroll[keys[i]] != ctrl.datas_original.payroll[keys[i]]){ return true }
        }
      }
      return false;
    }

    function isEmployeeChange(){
      var keys = Object.keys(ctrl.datas_original.employee)
      for(var i = 1; i < keys.length; i++){
        if(ctrl.datas.employee[keys[i]] != ctrl.datas_original.employee[keys[i]]){ return true }
      }
      return false;
    }

    function isDataChange(){
      return isPayrollChange() || isEmployeeChange();
    }

    // convert string to float
    function payrollToFloat(){
      var keys = Object.keys(ctrl.datas.payroll)
      for(var i = 1; i < keys.length; i++){
        if(keys[i] != "id"){
          ctrl.datas.payroll[keys[i]] = parseFloat(ctrl.datas.payroll[keys[i]]);
        }
      }
    }

    function displayMonth(monthInfo){
      ctrl.currentMonthDisplay = "ประจำเดือน " + $filter('get_month_name')(monthInfo);
      ctrl.monthsDisplay = JSON.parse(JSON.stringify(ctrl.months));
      for(var i = 0; i < ctrl.monthsDisplay.length; i++){
        if(ctrl.monthsDisplay[i]["month"] == monthInfo["month"] && ctrl.monthsDisplay[i]["year"] == monthInfo["year"]){
          ctrl.monthsDisplay.splice(i, 1);
        }
      }
    }

    function getEmployee(id){
      reportService.getMonths(id).then(function(resp) {
        if (resp.data.length > 0) {
          ctrl.months = resp.data;
          lastestMonth = ctrl.months[0];
          ctrl.currentMonth = ctrl.months[0];
          displayMonth(lastestMonth);
        }
      });

      service.getEmployee(id, null, null).then(function(resp) {
        ctrl.datas = resp.data;

        payrollToFloat();

        var e = resp.data.employee;
        ctrl.datas.salary = parseFloat(ctrl.datas.employee.salary);
        if(e.start_date){
          ctrl.datas.employee.start_date = new Date(ctrl.datas.employee.start_date);
        }else{
          ctrl.datas.employee.start_date = new Date(ctrl.datas.employee.created_at);
        }

        ctrl.datas_original = $.extend(true, {}, ctrl.datas);
        ctrl.calTotal();
        ctrl.isLastestPayroll = true;

        // set display name
        var hasPrefixThai = e.prefix_thai && e.prefix_thai.length > 0
        var hasFirstNameThai = e.first_name_thai && e.first_name_thai.length > 0
        var hasLastNameThai = e.last_name_thai && e.last_name_thai.length > 0
        if (hasPrefixThai && hasFirstNameThai && hasLastNameThai) {
          ctrl.displayName = e.prefix_thai + " " + e.first_name_thai + " " + e.last_name_thai
        } else {
          ctrl.displayName = e.prefix + " " + e.first_name + " ";
          if(e.middle_name && e.middle_name.length > 0){ ctrl.displayName += e.middle_name + " " }
          ctrl.displayName += e.last_name;
        }

        // get others employee
        service.getAllEmployee().then(function(resp) {
          if (resp.data.length > 0) {
            ctrl.employee_lists = resp.data
            for(var i = 0; i < ctrl.employee_lists.length; i++){
              if (ctrl.employee_lists[i].name == ctrl.displayName){
                ctrl.employee_lists.splice(i, 1);
              }
            }
          }
        });

      });
    }

    function switchMonth(monthInfo) {
      var month = monthInfo.month;
      var year = monthInfo.year;
      service.getEmployee(employeeId, month, year).then(function(resp) {
        ctrl.currentMonth = monthInfo;
        //reset salary
        ctrl.datas.employee.salary = ctrl.datas_original.employee.salary;
        ctrl.datas.payroll.salary = ctrl.datas_original.payroll.salary;

        //dispay payroll
        ctrl.datas.payroll = resp.data.payroll
        payrollToFloat();
        ctrl.calTotal();
        if(lastestMonth["month"].toString() == month.toString() && lastestMonth["year"].toString() == year.toString()){
          ctrl.isLastestPayroll = true;
        }else{
          ctrl.isLastestPayroll = false;
        }
        displayMonth(monthInfo);
      });
    }

    ctrl.changeSalary = function(){
      ctrl.datas.employee.salary = ctrl.datas.payroll.salary;
    }

    ctrl.openEmployeeDetails = function(id){
      if(isDataChange()){
        openConfirmationModal("คุณต้องการออกจากหน้านี้โดยไม่บันทึกค่าหรือไม่?", function(){
          $rootScope.openEmployeeDetails(id);
        }, function(){
          $log.info("DISMISS!!");
        })
      }else{
        $rootScope.openEmployeeDetails(id);
      }
    }

    ctrl.cancel = function(){
      if (ctrl.isEdit) {
        if(isDataChange()){
          openConfirmationModal("คุณต้องการออกจากหน้านี้โดยไม่บันทึกค่าหรือไม่?", function(){
            $rootScope.openEmployees();
          }, function(){
            $log.info("DISMISS!!");
          })
        }else{
          $rootScope.openEmployees();
        }
      } else {
        $rootScope.openEmployees();
      }
    }

    ctrl.submit = function(parm){
      ctrl.isSubmit = true
      if (ctrl.isEdit) {
        if(isDataChange()){
          openConfirmationModal("คุณต้องการบันทึกการเปลี่ยนแปลงครั้งนี้หรือไม่?", function(){

            var datas_result = $.extend(true, {}, ctrl.datas);
            if(!ctrl.isLastestPayroll){
              delete datas_result['payroll']
            }

            service.saveEmployee(ctrl.datas.employee.id, datas_result).then(function(resp) {
              $log.info("SAVE!!!");
              $rootScope.openEmployees();
            });
          }, function(){
            ctrl.isSubmit = false
            $log.info("DISMISS!!");
          });
        }else{
          $log.info("NOTHING CHANGE!!!");
          ctrl.isSubmit = false
          $rootScope.openEmployees();
        }
      } else {
        service.createEmployee(parm).then(function(resp) {
          ctrl.isSubmit = false
          $rootScope.openEmployees();
        });
      }
    }

    ctrl.calTotal = function(){
      if (ctrl.isEdit) {
        var p = ctrl.datas.payroll;
        var e = ctrl.datas.employee;
        ctrl.total = 0;
        if(p.salary){ ctrl.total += p.salary }
        if(p.ot){ ctrl.total += p.ot }
        if(p.position_allowance){ ctrl.total += p.position_allowance }
        if(p.allowance ){ ctrl.total += p.allowance }
        if(p.attendance_bonus){ ctrl.total += p.attendance_bonus}
        if(p.bonus){ ctrl.total += p.bonus}
        if(p.extra_etc){ ctrl.total += p.extra_etc}
        if(p.tax){ ctrl.total -= p.tax}
        if(p.social_insurance){ ctrl.total -= p.social_insurance}
        if(p.pvf){ ctrl.total -= p.pvf}
        if(p.absence){ ctrl.total -= p.absence}
        if(p.late){ ctrl.total -= p.late}
        if(p.advance_payment){ ctrl.total -= p.advance_payment}
        if(p.fee_etc){ ctrl.total -= p.fee_etc}
      }
    }

    ctrl.deleteEmployee = function(id) {
      openConfirmationModal("คุณต้องการลบพนักงานหรือไม่?", function() {
        service.deleteEmployee(id).then(function(resp) {
          $rootScope.openEmployees();
        })
      }, function(){
        $log.info("DISMISS!!");
      })
    }

    ctrl.switchMonth = function(monthInfo) {
      if (isPayrollChange()) {
        openConfirmationModal("คุณต้องการออกจากหน้านี้โดยไม่บันทึกค่าหรือไม่?", function() {
          switchMonth(monthInfo);
        }, function() {
          $log.info("DISMISS!!");
        })
      } else {
        switchMonth(monthInfo);
      }
    }

    ctrl.getAllPayroll = function(id) {
      service.getEmployeePayrolls(id).then(function(resp) {
        ctrl.employeePayrolls = resp.data
      })
    }

    if (ctrl.isEdit) {
      getEmployee(employeeId);
    }

  }])
})();
